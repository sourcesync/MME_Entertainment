<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Phidget21.NET</name>
    </assembly>
    <members>
        <member name="T:Phidgets.PhidgetCollection">
            <summary>
            This class represents a list of available or attached phidgets.
            </summary>
            <remarks>
            This class contains an indexer list storing references to attached or available phidgets.
            </remarks>
        </member>
        <member name="P:Phidgets.PhidgetCollection.Item(System.Int32)">
            <summary>
            The Phidget indexer list. This gets a reference to an attached or available phidget.
            </summary>
            <param name="index">The phidget index.</param>
            <returns>The reference to the phidget stored at the provided index.</returns>
        </member>
        <member name="T:Phidgets.AccelerometerAxis">
            <summary>
            This class represents an axis of acceleration for a Phidget Accelerometer.  
            All the properties of an Accelerometer axis are stored and modified in this class.
            </summary>
            <remarks>
            A Phidget Accelerometer axis object stores the acceleration data for that axis. 
            The sensitivity of the acceleration readings for the realted axis is implemented in this class.
            </remarks>
        </member>
        <member name="P:Phidgets.AccelerometerAxis.Sensitivity">
            <summary>
            The sensitivity property represents the read sensitivity of the acceleration data for this axis.
            </summary>
            <remarks>
            The sensitivity property gets/sets the sensitiviy data member. 
            This is the difference in acceleration that must appear between succesive calls to the OnAccelerationChange event handler.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.AccelerometerAxis.Acceleration">
            <summary>
            The acceleration property represents the acceleration data for this axis.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.AccelerometerAxis.AccelerationMax">
            <summary>
            The AccelerationMax property represents the largest acceleration value that this axis will return
            </summary>
            <remarks>
            If the returned acceleration is equal to this maximum, assume that this axis has been saturated - 
            the actual acceleration could be higher.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.AccelerometerAxis.AccelerationMin">
            <summary>
            The AccelerationMin property represents the largest (negative) acceleration value that this axis will return
            </summary>
            <remarks>
            If the returned acceleration is equal to this minimum, assume that this axis has been saturated - 
            the actual acceleration could be higher.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="T:Phidgets.AccelerometerAxisCollection">
            <summary>
            This class represents the collection of axes related to a Phidget Accelerometer.  
            All the methods and properties used to axes the available axes are implemented in this class.
            </summary>
            <remarks>
            This class contains the count of the available axes and the axis indexer to access the axes.
            </remarks>
        </member>
        <member name="P:Phidgets.AccelerometerAxisCollection.Item(System.Int32)">
            <summary>
            The AccelerometerAxis indexer list.
            </summary>
            <param name="index">The axis index.  Index 0 is the x-axis, 1 is the y-axis, and 2 is the z-axis (where available).</param>
            <returns>The axis object stored at that index that represents the corresponding axis.</returns>
        </member>
        <member name="T:Phidgets.ServoServo">
            <summary>
            This class represents a servo motor for a Phidget Servo.  All the properties of a servo motor are stored and modified in this class.
            </summary>
            <remarks>
            A Phidget Servo servo object stores the position data for that motor.
            </remarks>
        </member>
        <member name="M:Phidgets.ServoServo.setServoParameters(System.Double,System.Double,System.Double)">
            <summary>
            Sets custom servo parameters for using a servo not in the predefined list. Pulse widths are specified in microseconds.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.ServoServo.Position">
            <summary>
            Gets or sets the position property of the servo motor.
            </summary>
            <remarks>
            <para>Note that since servo motors do not offer any feedback in their interface, this value is simply 
            whatever the servo was last set to. There is no way of determining the position of a servo that has 
            been plugged in, until it's position has been set. Therefore, if an initial position is important, 
            it should be set as part of initialization.</para>
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the position is out of range.</exception>
        </member>
        <member name="P:Phidgets.ServoServo.PositionMax">
            <summary>
            Represents the largest position value that this motor will accept
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.ServoServo.PositionMin">
            <summary>
            Represents the smallest position value that this motor will accept
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.ServoServo.Engaged">
            <summary>
            Gets or sets the engaged property of the servo motor.
            </summary>
            <remarks>
            <para>Setting this to true sends the servo to the currently set position - and holds it there. Setting this to
            false will remove the holding force, so the servo can be freely rotated by hand.</para>
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.ServoServo.Type">
            <summary>
            Sets / Gets the type of servo. This determines how degrees are calculated from PCM pulses, and sets min and max angles.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="T:Phidgets.ServoServo.ServoType">
            <summary>
            Supported servo types.
            </summary>
        </member>
        <member name="T:Phidgets.ServoServoCollection">
            <summary>
            This class represents a collection of Servo servo motors. All the methods and properties used to access the available 
            servo motors are implemented in this class.
            </summary>
            <remarks>
            This class contains the count of the available servo motors and the Servo servo motor indexer to access the 
            Servo servo motor objects.
            </remarks>
        </member>
        <member name="P:Phidgets.ServoServoCollection.Item(System.Int32)">
            <summary>
            The Servo motor object indexer list. 
            </summary>
            <remarks>
            This gets a reference to the Servo motor object stored at the supplied index locaiton in the collection list.
            </remarks>
            <param name="index">The Servo motor object index.</param>
            <returns>A reference to the Servo motor object stored at the supplied index location in the collection list.</returns>
        </member>
        <member name="T:Phidgets.SpatialAccelerometerAxis">
            <summary>
            This class represents an axis of acceleration on a Phidget Spatial board.
            </summary>
        </member>
        <member name="P:Phidgets.SpatialAccelerometerAxis.Acceleration">
            <summary>
            Gets the current acceleration, in gs.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.SpatialAccelerometerAxis.AccelerationMax">
            <summary>
            Gets the maximum acceleration that the sensor can measure.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.SpatialAccelerometerAxis.AccelerationMin">
            <summary>
            Gets the minimum acceleration that the sensor can measure.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="T:Phidgets.SpatialAccelerometerAxisCollection">
            <summary>
            This class represents a collection of accelerometer axes.
            </summary>
        </member>
        <member name="P:Phidgets.SpatialAccelerometerAxisCollection.Item(System.Int32)">
            <summary>
            Gets an accelerometer axes.
            </summary>
            <param name="index">Index of the axis to get.</param>
            <returns>The requested axis.</returns>
        </member>
        <member name="T:Phidgets.SpatialGyroAxis">
            <summary>
            This class represents a gyroscope axis on the Phidget Spatial.
            </summary>
        </member>
        <member name="P:Phidgets.SpatialGyroAxis.AngularRate">
            <summary>
            Gets the angular rate of rotation for this Gyro axis, in degrees per second.
            </summary>
        </member>
        <member name="P:Phidgets.SpatialGyroAxis.AngularRateMax">
            <summary>
            Gets the maximum supported angular rate for this gyro axis.
            </summary>
        </member>
        <member name="P:Phidgets.SpatialGyroAxis.AngularRateMin">
            <summary>
            Gets the minimum supported angular rate for this gyro axis.
            </summary>
        </member>
        <member name="T:Phidgets.SpatialGyroAxisCollection">
            <summary>
            This class represents a collection of gyro axes.
            </summary>
        </member>
        <member name="P:Phidgets.SpatialGyroAxisCollection.Item(System.Int32)">
            <summary>
            Returns a gyro axis.
            </summary>
            <param name="index">Index of the axis to return.</param>
            <returns>The axis.</returns>
        </member>
        <member name="T:Phidgets.SpatialCompassAxis">
            <summary>
            This class represents a compass axis on the Phidget Spatial.
            </summary>
        </member>
        <member name="P:Phidgets.SpatialCompassAxis.MagneticField">
            <summary>
            Gets the magnetic field strength for this axis, in Gauss.
            </summary>
        </member>
        <member name="P:Phidgets.SpatialCompassAxis.MagneticFieldMax">
            <summary>
            Gets the maximum magnetic field strength measurable by this compass axis.
            </summary>
        </member>
        <member name="P:Phidgets.SpatialCompassAxis.MagneticFieldMin">
            <summary>
            Gets the minimum magnetic field strength measurable by this compass axis.
            </summary>
        </member>
        <member name="T:Phidgets.SpatialCompassAxisCollection">
            <summary>
            This class represents a collection of compass axes
            </summary>
        </member>
        <member name="P:Phidgets.SpatialCompassAxisCollection.Item(System.Int32)">
            <summary>
            Gets a compass axis.
            </summary>
            <param name="index">Index of the axis to get.</param>
            <returns>The compass axis.</returns>
        </member>
        <member name="T:Phidgets.SpatialEventData">
            <summary>
            This class represents a set of spatial data for a moment in time.
            </summary>
        </member>
        <member name="F:Phidgets.SpatialEventData.Acceleration">
            <summary>
            Acceleration data.
            </summary>
        </member>
        <member name="F:Phidgets.SpatialEventData.AngularRate">
            <summary>
            Angular rate (gyro) data.
            </summary>
        </member>
        <member name="F:Phidgets.SpatialEventData.MagneticField">
            <summary>
            Magnetic field strength (compass) data.
            </summary>
        </member>
        <member name="F:Phidgets.SpatialEventData.Timestamp">
            <summary>
            Timestamp of when this data was taken.
            </summary>
            <remarks>This timestamp starts at 0 when the Phidget is opened/attached.</remarks>
        </member>
        <member name="T:Phidgets.FrequencyCounter">
            <summary>
            This class represents a Phidget Frequency Counter. All methods to control a Phidget Frequency Counter are implemented in this class.
            </summary>
        </member>
        <member name="T:Phidgets.Phidget">
            <summary>
            Base class from which all Phidget device classes derive.
            </summary>
            <remarks>
            Don't create phidget devices directly using this class. Use the specific class for the device that you wish to access.
            </remarks>
        </member>
        <member name="M:Phidgets.Phidget.enableLogging(Phidgets.Phidget.LogLevel,System.String)">
            <summary>
            Enables logging.
            </summary>
            <remarks>
            This enables logging of library messages to a file or the console. This is usually used for debugging the phidget21 C library.
            </remarks>
            <param name="level">The highest level of logging that will be output.</param>
            <param name="file">Filename to log to. Specify NULL to output to the console.</param>
        </member>
        <member name="M:Phidgets.Phidget.disableLogging">
            <summary>
            Disables logging.
            </summary>
            <remarks>
            This disables logging. This only needs to be called if logging was previously enabled.
            </remarks>
        </member>
        <member name="M:Phidgets.Phidget.log(Phidgets.Phidget.LogLevel,System.String,System.String)">
            <summary>
            Adds a message to the log.
            </summary>
            <remarks>
            This adds a line to the log at a certain logging level. This is usefull for debugging, but be aware that the log will be full of low level
            C API logs, and is not generally usefull to those outside of Phidgets Inc.
            </remarks>
            <param name="level">The level to enter the log at.</param>
            <param name="identifier">An arbitrary identifier for this log. This can be NULL. The C library uses this field for source filename and line number.</param>
            <param name="log">The message to log.</param>
        </member>
        <member name="M:Phidgets.Phidget.open(System.Int32)">
            <summary>
            Open this Phidget with a specific serial number.
            </summary>
            <remarks>
            <para>Open is pervasive. What this means is that you can call open on a device before it is plugged in, 
            and keep the device opened across device dis- and re-connections.</para>
            <para>Open is Asynchronous. What this means is that open will return immediately – 
            before the device being opened is actually available, so you need to use either the attach event or the waitForAttachment method to determine 
            if a device is available before using it.</para>
            <para>This version of open specifies a serial number - The serial number is a unique number assigned to each Phidget during production 
            and can be used to uniquely identify specific phidgets.</para>
            </remarks>
            <param name="serialNumber">The Serial Number</param>
        </member>
        <member name="M:Phidgets.Phidget.open">
            <summary>
            Open a Phidget without a serial number.
            </summary>
            <remarks>
            The first available Phidget will be opened. If there are two Phidgets of the same type attached to the system, 
            you should specify a serial number, as there is no guarantee which Phidget will be selected by the call to open().
            </remarks>
        </member>
        <member name="M:Phidgets.Phidget.open(System.String,System.Int32)">
            <summary>
            Open a Phidget remotely using an IP Address, without a serial number.
            </summary>
            <remarks>
            <para>This version of open is network based.</para>
            This method is the same as open(int serialNumber, string IPAddress, int port), except that it specifies no serial number. 
            Therefore, the first available Phidget will be opened. If there are two Phidgets of the same type attached to the system, 
            you should specify a serial number, as there is no guarantee which Phidget will be selected by the call to open().
            </remarks>
            <param name="IPAddress">The server IP address.</param>
            <param name="port">The server port.</param>
        </member>
        <member name="M:Phidgets.Phidget.open(System.Int32,System.String,System.Int32)">
            <summary>
            Open this Phidget remotely using an IP Address, and a specific serial number.
            </summary>
            <remarks>
            <para>This version of open is network based.</para>
            <para>This version of open specifies a serial number - The serial number is a unique number assigned to each Phidget during production 
            and can be used to uniquely identify specific phidgets. use <see>open(string IPAddress, int port)
            </see> to open a device without specifying the serial number.</para>
            </remarks>
            <param name="serialNumber">The Serial Number</param>
            <param name="IPAddress">IP Address or hostname of the Phidget Webservice</param>
            <param name="port">Port of the Phidget Webservice</param>
        </member>
        <member name="M:Phidgets.Phidget.open(System.String)">
            <summary>
            Open a Phidget remotely using a Server ID, without a serial number.
            </summary>
            <remarks>
            <para>This version of open is network based.</para>
            This method is the same as open(int serialNumber, string ServerID), except that it specifies no serial number. 
            Therefore, the first available Phidget will be opened. If there are two Phidgets of the same type attached to the system, 
            you should specify a serial number, as there is no guarantee which Phidget will be selected by the call to open().
            </remarks>
            <param name="ServerID">The Server ID</param>
        </member>
        <member name="M:Phidgets.Phidget.open(System.Int32,System.String)">
            <summary>
            Open this Phidget remotely using a Server ID, and a specific serial number.
            </summary>
            <remarks>
            <para>This version of open is network based.</para>
            <para>This version of open specifies a serial number - The serial number is a unique number assigned to each Phidget during production 
            and can be used to uniquely identify specific phidgets. use <see>open(string ServerID)</see> to open a device without specifying the serial number.</para>
            </remarks>
            <param name="serialNumber">The Serial Number</param>
            <param name="ServerID">ServerID of the Phidget Webservice</param>
        </member>
        <member name="M:Phidgets.Phidget.open(System.String,System.Int32,System.String)">
            <summary>
            Open a Phidget remotely and securely, using an IP Address, without a serial number.
            </summary>
            <remarks>
            <para>This version of open is network based.</para>
            This method is the same as open(int serialNumber, string IPAddress, int port, String password), except that it specifies no serial number. 
            Therefore, the first available Phidget will be opened. If there are two Phidgets of the same type attached to the system, 
            you should specify a serial number, as there is no guarantee which Phidget will be selected by the call to open().
            </remarks>
            <param name="IPAddress">IP Address or hostname of the Phidget Webservice</param>
            <param name="port">Port of the Phidget Webservice</param>
            <param name="password">The secure password for the Phidget Webservice</param>
        </member>
        <member name="M:Phidgets.Phidget.open(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Open this Phidget remotely and securely, using an IP Address, and a specific serial number.
            </summary>
            <remarks>
            <para>This version of open is network based.</para>
            This method is the same as open(int serialNumber, string IPAddress, int port), except that it specifies a password. 
            This password can be set as a parameter when starting the Phidget Webservice.
            </remarks>
            <param name="serialNumber">The Serial Number</param>
            <param name="IPAddress">IP Address or hostname of the Phidget Webservice</param>
            <param name="port">Port of the Phidget Webservice</param>
            <param name="password">The secure password for the Phidget Webservice</param>
        </member>
        <member name="M:Phidgets.Phidget.open(System.String,System.String)">
            <summary>
            Open this Phidget remotely and securely, using a Server ID, without a serial number.
            </summary>
            <remarks>
            <para>This version of open is network based.</para>
            This method is the same as open(int serialNumber, string ServerID, String password), except that it specifies no serial number. 
            Therefore, the first available Phidget will be opened. If there are two Phidgets of the same type attached to the system, 
            you should specify a serial number, as there is no guarantee which Phidget will be selected by the call to open().
            </remarks>
            <param name="ServerID">ServerID of the Phidget Webservice</param>
            <param name="password">The secure password for the Phidget Webservice</param>
        </member>
        <member name="M:Phidgets.Phidget.open(System.Int32,System.String,System.String)">
            <summary>
            Open this Phidget remotely and securely, using a Server ID, and a specific serial number.
            </summary>
            <remarks>
            <para>This version of open is network based.</para>
            This method is the same as open(int serialNumber, string ServerID), except that it specifies a password. 
            This password can be set as a parameter when starting the Phidget Webservice.
            </remarks>
            <param name="serialNumber">The serial number</param>
            <param name="ServerID">ServerID of the Phidget Webservice</param>
            <param name="password">The secure password for the Phidget Webservice</param>
        </member>
        <member name="M:Phidgets.Phidget.openLabel(System.String)">
            <summary>
            Open this Phidget with a specific label.
            </summary>
            <remarks>
            <para>Open is pervasive. What this means is that you can call open on a device before it is plugged in, 
            and keep the device opened across device dis- and re-connections.</para>
            <para>Open is Asynchronous. What this means is that open will return immediately – 
            before the device being opened is actually available, so you need to use either the attach event or the waitForAttachment method to determine 
            if a device is available before using it.</para>
            <para>This version of open specifies a label - The label can be set and changed by using the setLabel method (setLabel is unsupported on Windows).</para>
            </remarks>
            <param name="label">The Label</param>
        </member>
        <member name="M:Phidgets.Phidget.openLabel(System.String,System.String,System.Int32)">
            <summary>
            Open this Phidget remotely using an IP Address, and a specific label.
            </summary>
            <remarks>
            <para>This version of open is network based.</para>
            <para>This version of open specifies a label - The label can be set and changed by using the setLabel method (setLabel is unsupported on Windows).
            use <see>open(string IPAddress, int port)</see> to open a device without specifying the label.</para>
            </remarks>
            <param name="label">The Label</param>
            <param name="IPAddress">IP Address or hostname of the Phidget Webservice</param>
            <param name="port">Port of the Phidget Webservice</param>
        </member>
        <member name="M:Phidgets.Phidget.openLabel(System.String,System.String)">
            <summary>
            Open this Phidget remotely using a Server ID, and a specific label.
            </summary>
            <remarks>
            <para>This version of open is network based.</para>
            <para>This version of open specifies a label - The label can be set and changed by using the setLabel method (setLabel is unsupported on Windows).
            use <see>open(string ServerID)</see> to open a device without specifying the label.</para>
            </remarks>
            <param name="label">The Label</param>
            <param name="ServerID">ServerID of the Phidget Webservice</param>
        </member>
        <member name="M:Phidgets.Phidget.openLabel(System.String,System.String,System.Int32,System.String)">
            <summary>
            Open this Phidget remotely and securely, using an IP Address, and a specific label.
            </summary>
            <remarks>
            <para>This version of open is network based.</para>
            This method is the same as <see>openLabel(string label, string IPAddress, int port)</see>, except that it specifies a password. 
            This password can be set as a parameter when starting the Phidget Webservice.
            </remarks>
            <param name="label">The Label</param>
            <param name="IPAddress">IP Address or hostname of the Phidget Webservice</param>
            <param name="port">Port of the Phidget Webservice</param>
            <param name="password">The secure password for the Phidget Webservice</param>
        </member>
        <member name="M:Phidgets.Phidget.openLabel(System.String,System.String,System.String)">
            <summary>
            Open this Phidget remotely and securely, using a Server ID, and a specific label.
            </summary>
            <remarks>
            <para>This version of open is network based.</para>
            This method is the same as <see>openLabel(string label, string ServerID)</see>, except that it specifies a password. 
            This password can be set as a parameter when starting the Phidget Webservice.
            </remarks>
            <param name="label">The Label</param>
            <param name="ServerID">ServerID of the Phidget Webservice</param>
            <param name="password">The secure password for the Phidget Webservice</param>
        </member>
        <member name="M:Phidgets.Phidget.waitForAttachment">
            <summary>
            Waits for this Phidget to become available.
            </summary>
            <remarks>
            <para>This method can be called after open has been called to wait for thid Phidget to become available. 
            This is usefull because open is asynchronous (and thus returns immediately), and most methods will throw a PhidgetException 
            is they are called before a device is actually ready. This method is synonymous with polling the isAttached method until 
            it returns True, or using the Attach event.</para>
            <para>This method blocks indefinitely until the Phidget becomes available. This can be quite some time (forever), if the Phidget is never plugged in.</para>
            <para>This method uses the attach handler internally to determine when the Phidget becomes available.</para>
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened.</exception>
        </member>
        <member name="M:Phidgets.Phidget.waitForAttachment(System.Int32)">
            <summary>
            Waits for this Phidget to become available for the specified time.
            </summary>
            <remarks>
            <para>This method can be called after open has been called to wait for thid Phidget to become available. 
            This is usefull because open is asynchronous (and thus returns immediately), and most methods will throw a PhidgetException 
            is they are called before a device is actually ready. This method is synonymous with polling the isAttached method until 
            it returns True, or using the Attach event.</para>
            <para>This method blocks indefinitely until the Phidget becomes available. This can be quite some time (forever), if the Phidget is never plugged in.</para>
            <para>This method uses the attach handler internally to determine when the Phidget becomes available.</para>
            </remarks>
            <param name="milliseconds">Specified wait time in milliseconds</param>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened, or if the time limit expires before an attach is detected.</exception>
        </member>
        <member name="M:Phidgets.Phidget.close">
            <summary>
            Closes this Phidget.
            </summary>
            <remarks>
            This will shut down all threads dealing with this Phidget and you won't recieve any more events. 
            This should be called before closing your application or things may not shut down cleanly.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened.</exception>
        </member>
        <member name="M:Phidgets.Phidget.Equals(System.Object)">
            <summary>
            Compares two Phidgets.
            </summary>
            <remarks>
            This method compares two Phidgets using serial number, device type and version.
            </remarks>
            <param name="comp">The object to compare this object to.</param>
            <returns>True if they are equal, false if they are different.</returns>
        </member>
        <member name="M:Phidgets.Phidget.GetHashCode">
            <summary>
            Returns this objects hash code.
            </summary>
            <remarks>
            In this overriden case for Phidget objects, the hashcode returned is the device serial number.
            </remarks>
            <returns>The device serial number.</returns>
        </member>
        <member name="P:Phidgets.Phidget.Class">
            <summary>
            Gets the class of this Phidget.
            </summary>
            <remarks>
            Classes represent a group of Phidgets that use the same API type.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.Phidget.ID">
            <summary>
            Gets the ID of this Phidget.
            </summary>
            <remarks>
            This ID specifies a specific Phidget device, within the phidget class.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.Phidget.SerialNumber">
            <summary>
            Gets the unique serial number of this Phidget.
            </summary>
            <remarks>
            This number is set during manufacturing, and is unique across all Phidgets. This number can be used in calls to open to specify this specific Phidget to be opened.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.Phidget.Version">
            <summary>
            Gets the device version of this Phidget.
            </summary>
            <remarks>
            This number is simply a way of distinguishing between different revisions of a specific type of Phidget, and is only really of use if you need to troubleshoot device problems with Phidgets Inc.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.Phidget.Attached">
            <summary>
            Gets the attached status of this Phidget.
            </summary>
            <remarks>
            This method returns True or False, depending on whether the Phidget is phisically plugged into the computer, initialized, and ready to use - or not. 
            If a Phidget is not attached, many functions calls will fail with a PhidgetException, so either checking this function, or using the Attach and Detach events, 
            is recommended, if a device is likely to be attached or detached during use.
            </remarks>
        </member>
        <member name="P:Phidgets.Phidget.Name">
            <summary>
            Gets the name of this Phidget.
            </summary>
            <remarks>
            This is a string that describes the device. For example, a PhidgetInterfaceKit could be described as “Phidget InterfaceKit 8/8/8”, 
            or “Phidget InterfaceKit 0/0/4”, among others, depending on the specific device.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.Phidget.Type">
            <summary>
            Gets the device type of this Phidget.
            </summary>
            <remarks>
            This is a string that describes the device as a class of devices. 
            For example, all PhidgetInterfaceKit Phidgets will returns the String "PhidgetInterfaceKit".
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.Phidget.Label">
            <summary>
            Gets / sets the label associated with this Phidget.
            </summary>
            <remarks>
            This label is a String - up to ten characters - that is stored in the Flash memory of newer Phidgets. 
            This label can be set programatically, and is non-volatile - so it is remembered even if the Phidget is unplugged.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if this Phidget does not support labels.</exception>
        </member>
        <member name="P:Phidgets.Phidget.AttachedToServer">
            <summary>
            Gets the attached to server status of this Phidget.
            </summary>
            <remarks>
            For Phidgets opened over the network, returns the status of the connection to the server.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget was not opened over the network.</exception>
        </member>
        <member name="P:Phidgets.Phidget.Address">
            <summary>
            Gets the Phidget Webservice network address for a Phidget opened over the network.
            </summary>
            <remarks>
            This may be an IP Address or a hostname.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget was not opened over the network, or if the server is not connected.</exception>
        </member>
        <member name="P:Phidgets.Phidget.ServerID">
            <summary>
            Gets the Phidget Webservice server id for a Phidget opened over the network.
            </summary>
            <remarks>
            This is an arbitrary server identifier, independant of IP address and Port. This is only available if the Phidget was opened with ServerID.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget was not opened over the network via ServerID, or if the server is not connected.</exception>
        </member>
        <member name="P:Phidgets.Phidget.Port">
            <summary>
            Gets the Phidget Webservice port for a Phidget opened over the network.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget was not opened over the network, or if the server is not connected.</exception>
        </member>
        <member name="E:Phidgets.Phidget.Attach">
            <summary>
            Attach event.
            </summary>
            <remarks>
            The attach handler is called when this Phidget is phisically attached to the system, has gone through its initalization, and is ready to be used.
            </remarks>
        </member>
        <member name="E:Phidgets.Phidget.Detach">
            <summary>
            Detach event.
            </summary>
            <remarks>
            The detach event is called when this Phidget is phisically detached from the system, and is no longer available.
            </remarks>
        </member>
        <member name="E:Phidgets.Phidget.Error">
            <summary>
            Error event.
            </summary>
            <remarks>
            The error event is called when an asynchronous error occurs. This is generally used for network errors, and device hardware error messages.
            </remarks>
        </member>
        <member name="E:Phidgets.Phidget.ServerConnect">
            <summary>
            Server connect event
            </summary>
            <remarks>
            This is called for network opened Phidgets when a connection to the Phidget Webservice has been established.
            </remarks>
        </member>
        <member name="E:Phidgets.Phidget.ServerDisconnect">
            <summary>
            Server disconnect event
            </summary>
            <remarks>
            This is called for network opened Phidgets when a connection to the Phidget Webservice has been broken - either by calling close, or by network trouble, etc.
            </remarks>
        </member>
        <member name="P:Phidgets.Phidget.LibraryVersion">
            <summary>
            Gets the library version.
            </summary>
            <remarks>
            <para>This is the library version of the underlying phidget21 C library and not the version of the .NET wrapper implementation.</para>
            <para>The version is retured as a string which contains the version number and build date.</para>
            </remarks>
        </member>
        <member name="T:Phidgets.Phidget.LogLevel">
            <summary>
            Logging levels.
            </summary>
        </member>
        <member name="F:Phidgets.Phidget.LogLevel.PHIDGET_LOG_CRITICAL">
            <summary>
            Critical error messages.
            </summary>
        </member>
        <member name="F:Phidgets.Phidget.LogLevel.PHIDGET_LOG_ERROR">
            <summary>
            Non-ciritcal error messages.
            </summary>
        </member>
        <member name="F:Phidgets.Phidget.LogLevel.PHIDGET_LOG_WARNING">
            <summary>
            Warning messages.
            </summary>
        </member>
        <member name="F:Phidgets.Phidget.LogLevel.PHIDGET_LOG_DEBUG">
            <summary>
            Debug messages (internal use only)
            </summary>
        </member>
        <member name="F:Phidgets.Phidget.LogLevel.PHIDGET_LOG_INFO">
            <summary>
            Informational messages.
            </summary>
        </member>
        <member name="F:Phidgets.Phidget.LogLevel.PHIDGET_LOG_VERBOSE">
            <summary>
            Verbose messages.
            </summary>
        </member>
        <member name="T:Phidgets.Phidget.PhidgetClass">
            <summary>
            Phidget classes.
            </summary>
        </member>
        <member name="T:Phidgets.Phidget.PhidgetID">
            <summary>
            Phidget IDs.
            </summary>
        </member>
        <member name="F:Phidgets.FrequencyCounter.inputs">
            <summary>
            The collection of frequency counter inputs.
            </summary>
        </member>
        <member name="E:Phidgets.FrequencyCounter.Count">
            <summary>
            Count event.
            </summary>
            <remarks>
            <para>The count event is called when ticks are counted on an input, or when the timeout expires.</para>
            </remarks>
        </member>
        <member name="T:Phidgets.Bridge">
            <summary>
            This class represents a Phidget Bridge. All methods to control a Phidget Bridge are implemented in this class.
            </summary>
        </member>
        <member name="F:Phidgets.Bridge.bridges">
            <summary>
            The collection of bridge inputs.
            </summary>
        </member>
        <member name="P:Phidgets.Bridge.DataRate">
            <summary>
            Gets / sets the event data rate in ms.
            </summary>
            <remarks>Data rate needs to be between DataRateMin and DataRateMax, and a multiple of 8.</remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or the data rate is out of range.</exception>
        </member>
        <member name="P:Phidgets.Bridge.DataRateMax">
            <summary>
            Gets the maximum supported data rate in ms.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.Bridge.DataRateMin">
            <summary>
            Gets the minimum supported data rate in ms.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="E:Phidgets.Bridge.BridgeData">
            <summary>
            Bridge data event
            </summary>
            <remarks>
            <para>The bridge data event is called at a sets rate as defined by DataRate.</para>
            </remarks>
        </member>
        <member name="T:Phidgets.Manager">
            <summary>
            This class represents a Phidget Manager.
            </summary>
            <remarks>
            <para>The Phidget manager is a way to keep track of attached phidgets, it will send Attach and Detach events as Phidgets are 
            added and removed from the system.</para>
            <para>The Phidget manager returns special instances of Phidget objects that are not actually connected to opened Phidgets but can 
            be used to get serial number, name, version, etc.</para>
            </remarks>
        </member>
        <member name="M:Phidgets.Manager.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:Phidgets.Manager.Finalize">
            <summary>
            Class destructor/finalizer.
            </summary>
            <remarks>
            Will attempt to close the manager if it has yet to be closed.
            </remarks>
        </member>
        <member name="M:Phidgets.Manager.open">
            <summary>
            Starts the PhidgetManager.
            </summary>
            <remarks>
            This method starts the phidget manager running. If attach and detach listeners are to be used, 
            they should be registered before start is called so that no events are missed. 
            Once start is called, the Phidget Manager will be active until close is called.
            </remarks>
        </member>
        <member name="M:Phidgets.Manager.open(System.String,System.Int32)">
            <summary>
            Open this Manager remotely using an IP Address.
            </summary>
            <remarks>
            This version of open is network based.
            </remarks>
            <param name="IPAddress">IP Address or hostname of the Phidget Webservice</param>
            <param name="port">Port of the Phidget Webservice</param>
        </member>
        <member name="M:Phidgets.Manager.open(System.String)">
            <summary>
            Open this Manager remotely using a Server ID.
            </summary>
            <remarks>
            This version of open is network based.
            </remarks>
            <param name="ServerID">ServerID of the Phidget Webservice</param>
        </member>
        <member name="M:Phidgets.Manager.open(System.String,System.Int32,System.String)">
            <summary>
            Open this Manager remotely and securely, using an IP Address.
            </summary>
            <remarks>
            This method is the same as <see>open(String ipAddress, int port)</see>, except that it specifies a password. 
            This password can be set as a parameter when starting the Phidget Webservice.
            </remarks>
            <param name="IPAddress">IP Address or hostname of the Phidget Webservice</param>
            <param name="port">Port of the Phidget Webservice</param>
            <param name="password">Specified password</param>
        </member>
        <member name="M:Phidgets.Manager.open(System.String,System.String)">
            <summary>
            Open this Manager remotely and securely, using a Server ID.
            </summary>
            <remarks>
            This method is the same as <see>open(String serverID)</see>, except that it specifies a password. 
            This password can be set as a parameter when starting the Phidget Webservice.
            </remarks>
            <param name="ServerID">ServerID of the Phidget Webservice</param>
            <param name="password">Specified password</param>
        </member>
        <member name="M:Phidgets.Manager.close">
            <summary>
            Shuts down the Phidget Manager.
            </summary>
            <remarks>
            This method should be called to close down the Phidget Manager. Events will no longer be recieved. 
            This method gets called automatically when the class is destroyed, but it's still a good idea to call it explicitely.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException"></exception>
        </member>
        <member name="P:Phidgets.Manager.Devices">
            <summary>
            A list of attached Phidgets.
            </summary>
            <remarks>
            This list is updated right before the attach and detach events, and so will be up to date within these events.
            </remarks>
        </member>
        <member name="P:Phidgets.Manager.Address">
            <summary>
            Gets the Phidget Webservice network address for a Manager opened over the network.
            </summary>
            <remarks>
            This may be an IP Address or a hostname.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Manager was not opened over the network, or if the server is not connected.</exception>
        </member>
        <member name="P:Phidgets.Manager.ServerID">
            <summary>
            Gets the Phidget Webservice server id for a Manager opened over the network.
            </summary>
            <remarks>
            This is an arbitrary server identifier, independant of IP address and Port. This is only available if the Manager was opened with ServerID.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Manager was not opened over the network via ServerID, or if the server is not connected.</exception>
        </member>
        <member name="P:Phidgets.Manager.Port">
            <summary>
            Gets the Phidget Webservice port for a Manager opened over the network.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Manager was not opened over the network, or if the server is not connected.</exception>
        </member>
        <member name="P:Phidgets.Manager.AttachedToServer">
            <summary>
            Gets the attached to server status of this Manager.
            </summary>
            <remarks>
            For Managers opened over the network, returns the status of the connection to the server.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Manager was not opened over the network.</exception>
        </member>
        <member name="E:Phidgets.Manager.Attach">
            <summary>
            Attach event.
            </summary>
            <remarks>
            The attach handler is called when a Phidget is physically attached to the system.
            </remarks>
        </member>
        <member name="E:Phidgets.Manager.Detach">
             <summary>
             Detach event.
             </summary>
             <remarks>
             The detach handler is called when a Phidget is phisically detached from the system.
            </remarks>
        </member>
        <member name="E:Phidgets.Manager.Error">
            <summary>
            Error event.
            </summary>
            <remarks>
            The error event is called when an asyncronous error occurs. This is only used for network errors for Managers opened over the network.
            </remarks>
        </member>
        <member name="E:Phidgets.Manager.ServerConnect">
            <summary>
            Server connect event
            </summary>
            <remarks>
            This is called for network opened Managers when a connection to the Phidget Webservice has been established.
            </remarks>
        </member>
        <member name="E:Phidgets.Manager.ServerDisconnect">
            <summary>
            Server disconnect event
            </summary>
            <remarks>
            This is called for network opened Managers when a connection to the Phidget Webservice has been broken - either by calling close, or by network trouble, etc.
            </remarks>
        </member>
        <member name="T:Phidgets.TemperatureSensor">
            <summary>
            This class represents a Phidget temperature Sensor. All methods to read temperaure data from the sensor are implemented in this class.
            </summary>
            <remarks>
            <para>The Temperature Phidget consists of a thermocouple interface, and a temperature sensing IC, which is used to measure the temperature 
            of the thermocouple cold junction and calibrate the thermocouple sensed temperature.</para>
            <para>Both the thermocouple and temperature IC (ambient sensor) temperatures can be read. Values are returned in degrees celcius.</para>
            </remarks>
        </member>
        <member name="F:Phidgets.TemperatureSensor.ambientSensor">
            <summary>
            The Phidget TemperatureSensor ambient sensor.
            </summary>
            <remarks>
            This is the board ambient temperature sensor.
            </remarks>
        </member>
        <member name="F:Phidgets.TemperatureSensor.thermocouples">
            <summary>
            The collection of available thermocouples.
            </summary>
        </member>
        <member name="M:Phidgets.TemperatureSensor.#ctor">
            <summary>
            Class Constructor.
            </summary>
            <remarks>
            Calling this opens a connection to the phidget21 C library creates an internal handle for this Phidget, ready to call open on.
            </remarks>
        </member>
        <member name="M:Phidgets.TemperatureSensor.Finalize">
            <summary>
            Class destructor/finalizer.
            </summary>
            <remarks>
            Will attempt to close the phidget if it has yet to be closed.
            </remarks>
        </member>
        <member name="E:Phidgets.TemperatureSensor.TemperatureChange">
            <summary>
            Temperature Change Event.
            </summary>
            <remarks>
            The temperature change handler is called when the temperature has changed by at least the Sensitivity trigger value that has been set.
            </remarks>
        </member>
        <member name="T:Phidgets.LED">
            <summary>
            This class represents a Phidget LED. All methods to control a Phidget LED are implemented in this class.
            </summary>
            <remarks>
            <para>The Phidget LED is a board that is meant for driving LEDs. Currently, the only available version drives 64 LEDs, 
            but other versions may become available so this number is not absolute.</para>
            <para>LEDs can be controlled individually, at brightness levels from 0-100.</para>
            </remarks>
        </member>
        <member name="F:Phidgets.LED.leds">
            <summary>
            The collection of available digital inputs.
            </summary>
        </member>
        <member name="M:Phidgets.LED.#ctor">
            <summary>
            Class Constructor.
            </summary>
            <remarks>Calling this opens a connection to the phidget21 C library creates an internal handle for this Phidget, ready to call open on.</remarks>
        </member>
        <member name="M:Phidgets.LED.Finalize">
            <summary>
            Class destructor/finalizer.
            </summary>
            <remarks>Will attempt to close the phidget if it has yet to be closed.</remarks>
        </member>
        <member name="P:Phidgets.LED.CurrentLimit">
            <summary>
            Gets / sets the board current limit.
            </summary>
            <remarks>Note that not all PhidgetLEDs support settable current limit.</remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if current limit is unsupported.</exception>
        </member>
        <member name="P:Phidgets.LED.Voltage">
            <summary>
            Gets / sets voltage level.
            </summary>
            <remarks>Note that not all PhidgetLEDs support settable voltage levels.</remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if setting voltage level is unsupported.</exception>
        </member>
        <member name="T:Phidgets.LED.LEDCurrentLimit">
            <summary>
            Available setting for current limit.
            </summary>
        </member>
        <member name="T:Phidgets.LED.LEDVoltage">
            <summary>
            Available settings for voltage output.
            </summary>
        </member>
        <member name="T:Phidgets.TextLCDCustomCharacter">
            <summary>
            This class represents a custom character that is defined for the TextLCD.
            </summary>
            <remarks>
            Custom characters can be inserted anywhere into the display string.
            </remarks>
        </member>
        <member name="M:Phidgets.TextLCDCustomCharacter.setCustomCharacter(System.Int32,System.Int32)">
            <summary>
            Set this custom character.
            </summary>
            <remarks>
            <para>The custom character is defined by two integers.</para>
            <para>The two Integers define the character. Each character is 8x5, the first integer defines the top 4x5 and the second the bottom 4x5.</para>
            <para>Each 4x5 half-character is defined by 5 hex bytes:</para>
            <para>ie:
            <div>
            <table>
            <tr><th>0x54321 = </th></tr>
            <tr><td>21111</td></tr>
            <tr><td>33222</td></tr>
            <tr><td>44433</td></tr>
            <tr><td>55554</td></tr>
            </table>
            </div>
            </para>
            <para>
            <div>
            <table>
            <tr><th>0x11111 = </th></tr>
            <tr><td>10001</td></tr>
            <tr><td>01000</td></tr>
            <tr><td>00100</td></tr>
            <tr><td>00010</td></tr>
            </table>
            </div>
            </para>
            <para>There is a generator utility that will generate the integers for you here: http://www.phidgets.com/documentation/customchar.html </para>
            </remarks>
            <param name="value1">First value given by the customchar utility</param>
            <param name="value2">Second value given by the customchar utility</param>
        </member>
        <member name="P:Phidgets.TextLCDCustomCharacter.StringCode">
            <summary>
            The character code associated with this character. 
            </summary>
            <remarks>
            Insert this into strings sent to the display where you would like this character to appear.
            </remarks>
        </member>
        <member name="T:Phidgets.TextLCDCustomCharacterCollection">
            <summary>
            The collection of custom characters that can be defined for the display.
            </summary>
            <remarks>
             The display handles 8 custom characters. These must be defined before
            they can be used. They will stay in the TextLCD memory until power is removed.
            </remarks>
        </member>
        <member name="P:Phidgets.TextLCDCustomCharacterCollection.Item(System.Int32)">
            <summary>
            The custom character object.
            </summary>
            <param name="index">Index of the custom character in the collection</param>
            <returns>The custom character object stored at the index in the collection</returns>
        </member>
        <member name="T:Phidgets.TextLCDRow">
            <summary>
            This class represents a row of text display on the screen of the TextLCD.
            </summary>
            <remarks>
            a TextLCDRow object stores the text that will be displayed at the row specified by the provided index. 
            Currently, TextLCDs only support 2 rows of text display.
            </remarks>
        </member>
        <member name="F:Phidgets.TextLCDRow.columns">
            <summary>
            Collection of characters in this row.
            </summary>
            <remarks>Use this for setting a single character instead of a whole row.</remarks>
        </member>
        <member name="P:Phidgets.TextLCDRow.DisplayString">
            <summary>
            Sets the display string of this row.
            </summary>
            <remarks>
            If the string is longer then the row, it will be truncated.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the row is invalid.</exception>
        </member>
        <member name="P:Phidgets.TextLCDRow.MaximumLength">
            <summary>
            Gets the maximum length of this row.
            </summary>
            <remarks>
            Returns the number of columns (characters per row) available on the display. This value is the same for every row.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="T:Phidgets.TextLCDScreen">
            <summary>
            This class represents a Screen connected to a TextLCD
            </summary>
            <remarks>
            A TextLCDScreen object stores the overall screen state, as well as a collection of screen rows.
            </remarks>
        </member>
        <member name="F:Phidgets.TextLCDScreen.rows">
            <summary>
            The collection of available rows of text display on the TextLCD screen.
            </summary>
        </member>
        <member name="F:Phidgets.TextLCDScreen.customCharacters">
            <summary>
            The collection of defined custom characters.
            </summary>
            <remarks>
            A maximum of 8 custom characters can be defined at a time for the TextLCD screen.
            </remarks>
        </member>
        <member name="M:Phidgets.TextLCDScreen.initialize">
            <summary>
            Initializes the active screen
            </summary>
            <remarks>
            Only usable for the TextLCD Adapter.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.TextLCDScreen.Backlight">
            <summary>
            Gets or sets the status of the backlight property.
            </summary>
            <remarks>
            True indicates that the backlight is on, False indicates that it is off. The default state depends on the board.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.TextLCDScreen.Brightness">
            <summary>
            Gets or sets the status of the Brightness property.
            </summary>
            <remarks>
            For devices that support a range of backlight brightnesses.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or brightness is not supported.</exception>
        </member>
        <member name="P:Phidgets.TextLCDScreen.Cursor">
            <summary>
            Gets or sets the status of the cursor property.
            </summary>
            <remarks>
            True turns the cursor is on, False turns it off. The cursor is an underscore which appears directly to the right of the 
            last entered character on the display. The cursor is by default disabled.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.TextLCDScreen.CursorBlink">
            <summary>
            Gets or sets the status of the cursor blink property.
            </summary>
            <remarks>
            True turns the cursor blink on, False turns it off. The cursor blink is an flashing box which appears 
            directly to the right of the last entered character on the display, in the same spot as the cursor if it is enabled. 
            The cursor blink is by default disabled.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.TextLCDScreen.Contrast">
            <summary>
            Gets or sets the value of the contrast property.
            </summary>
            <remarks>
            This is the contrast of the entire display.  The valid range is 0-255. Changing the contrast can increase the readability of 
            the display in certain viewing situation, such as at an odd angle.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or the contrast value is out of range.</exception>
        </member>
        <member name="P:Phidgets.TextLCDScreen.ScreenSize">
            <summary>
            Gets or sets the screen size
            </summary>
            <remarks>
            Only settable for the TextLCD Adapter.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or the contrast value is out of range.</exception>
        </member>
        <member name="T:Phidgets.TextLCDColumnCollection">
            <summary>
            A collection of columns within a row.
            </summary>
        </member>
        <member name="P:Phidgets.TextLCDColumnCollection.Item(System.Int32)">
            <summary>
            Sets a single character.
            </summary>
            <param name="index">Character index.</param>
        </member>
        <member name="P:Phidgets.TextLCDColumnCollection.Count">
            <summary>
            Number of columns in this collection (row).
            </summary>
        </member>
        <member name="T:Phidgets.TextLCDRowCollection">
            <summary>
            This class represents the collection of the available rows on the TextLCD screen.
            </summary>
            <remarks>
            This class contains the count of the total number of rows on the TextLCD screen and the indexer for accessing these display rows.
            </remarks>
        </member>
        <member name="P:Phidgets.TextLCDRowCollection.Item(System.Int32)">
            <summary>
            The TextLCD row indexer list. This gets a reference to the TextLCDRow object stored at the supplied 
            index locaiton in the collection list.
            </summary>
            <param name="index">The TextLCD row index.</param>
        </member>
        <member name="T:Phidgets.TextLCDScreenCollection">
            <summary>
            This class represents the collection of the available screens on the TextLCD.
            </summary>
            <remarks>
            This class contains the count of the total number of screens on the TextLCD and the indexer for accessing these screens.
            </remarks>
        </member>
        <member name="P:Phidgets.TextLCDScreenCollection.Item(System.Int32)">
            <summary>
            The TextLCD screen indexer list. This gets a reference to the TextLCDScreen object stored at the supplied 
            index locaiton in the collection list.
            </summary>
            <param name="index">The TextLCD screen index.</param>
        </member>
        <member name="T:Phidgets.InterfaceKitAnalogSensor">
            <summary>
            This class represents an analog sensor input for a Phidget InterfaceKit.  
            All the properties of an analog sensor input are stored and modified in this class.
            </summary>
            <remarks>
            A Phidget InterfaceKit analog sensor input object stores the analog sensor data for that input. 
            The sensitivity of the analog sensor readings for the related input is implemented in this class.
            </remarks>
        </member>
        <member name="P:Phidgets.InterfaceKitAnalogSensor.RawValue">
            <summary>
            Returns the raw value of a analog input.
            </summary>
            <remarks>This is a more accurate version of <see>Value</see>.  
            Note that the analog outputs on the Interface Kit 8/8/8 are only 10-bit values and this value 
            represents an oversampling to 12-bit.</remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.InterfaceKitAnalogSensor.Sensitivity">
            <summary>
            Gets or sets the change trigger sensitivity for an analog input.
            </summary>
            <remarks>
            This is the ammount that an inputs must change between successive SensorChangeEvents. 
            This is based on the 0-1000 range provided by Value. This value is by default set to 
            10 for most Interface Kits with analog inputs.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.InterfaceKitAnalogSensor.Value">
            <summary>
            Returns the value of a analog input.
            </summary>
            <remarks>
            The analog inputs are where analog sensors are attached on the InterfaceKit 8/8/8. 
            On the Linear and Circular touch sensor Phidgets, analog input 0 represents position on the slider.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.InterfaceKitAnalogSensor.DataRate">
            <summary>
            Represents the maximum rate at which events will be fired, in ms.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.InterfaceKitAnalogSensor.DataRateMax">
            <summary>
            The maximum supported data rate.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.InterfaceKitAnalogSensor.DataRateMin">
            <summary>
            The minimum supported data rate.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="T:Phidgets.InterfaceKitAnalogSensorCollection">
            <summary>
            This class represents a collection of Analog Sensor Inputs.
            </summary>
            <remarks>
            This class contains the count of the available analog sensor inputs and the analog 
            sensor input indexer to access the analog sensor inputs.
            </remarks>
        </member>
        <member name="P:Phidgets.InterfaceKitAnalogSensorCollection.Item(System.Int32)">
            <summary>
            The analog sensor input indexer list. 
            This gets a reference to the analog sensor object stored at the supplied index locaiton in the collection list.
            </summary>
            <param name="index">The analog sensor input index.</param>
            <returns>A reference to the analog sensor object stored at the supplied index location in the collection list.</returns>
        </member>
        <member name="T:Phidgets.InterfaceKitDigitalInputCollection">
            <summary>
            This class represents a collection of Digital Inputs. 
            All the methods and properties used to access the available digital inputs are implemented in this class.
            </summary>
            <remarks>
            This class contains the count of the available digital inputs and the digital input indexer to access the digital inputs.
            </remarks>
        </member>
        <member name="P:Phidgets.InterfaceKitDigitalInputCollection.Item(System.Int32)">
            <summary>
            The digital input indexer list. This gets the state of a digital input at the supplied index in the list.
            </summary>
            <remarks>
            Digital inputs read True where they are activated and false when they are in their default state.
            </remarks>
            <param name="index">Index of the input.</param>
            <returns>State of the input.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the index is out of range.</exception>
        </member>
        <member name="P:Phidgets.InterfaceKitDigitalInputCollection.Count">
            <summary>
            Returns the number of ditigal inputs on this Interface Kit.
            </summary>
            <remarks>
            Not all interface kits have the same number of digital inputs, and some don't have any digital inputs at all.
            </remarks>
        </member>
        <member name="T:Phidgets.InterfaceKitDigitalOutputCollection">
            <summary>
            This class represents a collection of Digital Outputs. 
            All the methods and properties used to access the available digital outputs are implemented in this class.
            </summary>
            <remarks>
            This class contains the count of the available digital outputs and the digital input indexer to access the digital outputs.
            </remarks>
        </member>
        <member name="P:Phidgets.InterfaceKitDigitalOutputCollection.Item(System.Int32)">
            <summary>
            The digital output indexer list. This gets or sets the state of a digital output at the supplied index in the list.
            </summary>
            <remarks>
            Depending on the Phidget, this value may be either the value that you last wrote out to the Phidget, 
            or the value that the Phidget last returned. This is because some Phidgets return their output state and others do not. 
            This means that with some devices, reading the output state of a pin directly after setting it, 
            may not return the value that you just set.
            </remarks>
            <param name="index">Index of the output.</param>
            <returns>State of the output.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the index is out of range.</exception>
        </member>
        <member name="P:Phidgets.InterfaceKitDigitalOutputCollection.Count">
            <summary>
            Returns the number of digital outputs on this Interface Kit.
            </summary>
            <remarks>
            Not all interface kits have the same number of digital outputs, and some don't have any digital outputs at all.
            </remarks>
        </member>
        <member name="T:Phidgets.GPS">
            <summary>
            This class represents a Phidget GPS. All methods to control a Phidget GPS are implemented in this class.
            </summary>
        </member>
        <member name="P:Phidgets.GPS.Latitude">
            <summary>
            Gets the latitude.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the value is unknown.</exception>
        </member>
        <member name="P:Phidgets.GPS.Longitude">
            <summary>
            Gets the longitude.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the value is unknown.</exception>
        </member>
        <member name="P:Phidgets.GPS.Altitude">
            <summary>
            Gets the altidue, in meters.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the value is unknown.</exception>
        </member>
        <member name="P:Phidgets.GPS.Heading">
            <summary>
            Gets the heading, in degrees.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the value is unknown.</exception>
        </member>
        <member name="P:Phidgets.GPS.Velocity">
            <summary>
            Gets the velocity, in km/h.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the value is unknown.</exception>
        </member>
        <member name="P:Phidgets.GPS.GPSDateAndTime">
            <summary>
            Gets the GPS date and time, in UTC.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the value is unknown.</exception>
        </member>
        <member name="P:Phidgets.GPS.PositionFixStatus">
            <summary>
            Gets the position fix status.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the value is unknown.</exception>
        </member>
        <member name="E:Phidgets.GPS.PositionChange">
            <summary>
            Position change event
            </summary>
            <remarks>
            <para>The position change event is called when latitude, longitude or altitude changes.</para>
            </remarks>
        </member>
        <member name="E:Phidgets.GPS.PositionFixStatusChange">
            <summary>
            Position fix status change event
            </summary>
            <remarks>
            <para>The position fix status change event is called when the position fix status changes.</para>
            </remarks>
        </member>
        <member name="T:Phidgets.RFIDDigitalOutputCollection">
            <summary>
            This class represents a collection of Digital Outputs. All the methods and properties used to access the available digital 
            outputs are implemented in this class.
            </summary>
            <remarks>
            This class contains the count of the available digital outputs and the digital input indexer to access the digital outputs.
            </remarks>
        </member>
        <member name="P:Phidgets.RFIDDigitalOutputCollection.Item(System.Int32)">
            <summary>
            The digital output indexer list. This gets or sets the state of a digital output at the supplied index in the list.
            </summary>
            <remarks>
            True indicates activated, False deactivated, which is the default.
            </remarks>
            <param name="index">Index of the output.</param>
            <returns>The state of the output.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, of the index is out of range.</exception>
        </member>
        <member name="P:Phidgets.RFIDDigitalOutputCollection.Count">
            <summary>
            Returns the number of outputs.
            </summary>
            <remarks>
            These are the outputs provided by the terminal block. 
            Older RFID readers do not have these outputs, and this method will return 0.
            </remarks>
        </member>
        <member name="T:Phidgets.LEDLEDCollection">
            <summary>
            This class represents a collection of LEDs. 
            All the methods and properties used to access the available LEDs are implemented in this class.
            </summary>
            <remarks>This class contains the count of the available LEDs and the LED indexer to access 
            the LEDs and set or get their brightness.</remarks>
        </member>
        <member name="P:Phidgets.LEDLEDCollection.Item(System.Int32)">
            <summary>
            The LED indexer list. This gets or sets the brightness level of an LED at the supplied index in the colleciton list.
            </summary>
            <remarks>Brightness levels range from 0-100.</remarks>
            <param name="index">The LED index.</param>
            <returns>The current brightness level of the LED at the supplied index.  Brightness levels range from 0-100.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the index of brightness value are out of range.</exception>
        </member>
        <member name="P:Phidgets.LEDLEDCollection.Count">
            <summary>
            Returns the number of LEDs that this board can drive. This may not correspond to the actual number of LEDs attached.
            </summary>
        </member>
        <member name="T:Phidgets.AdvancedServoServo">
            <summary>
            This class represents an advanced servo motor for a Phidget AdvancedServo.  
            All the properties of an advanced servo motor are stored and modified in this class.
            </summary>
        </member>
        <member name="M:Phidgets.AdvancedServoServo.setServoParameters(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets custom servo parameters for using a servo not in the predefined list. 
            Pulse widths are specified in microseconds, velocity in degrees/second.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.AdvancedServoServo.Acceleration">
            <summary>
            Gets / sets the acceleration of a servo, in degrees/second.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.AdvancedServoServo.AccelerationMax">
            <summary>
            Represents the largest acceleration value that this motor will accept
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.AdvancedServoServo.AccelerationMin">
            <summary>
            Represents the smallest acceleration value that this motor will accept
            </summary>
            <remarks>
            Note that an acceleration of 0 is not a valid value.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.AdvancedServoServo.VelocityLimit">
            <summary>
            Gets / sets the velocity limit for a servo.
            </summary>
            <remarks>This is the fastest that the motor will move.</remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.AdvancedServoServo.Velocity">
            <summary>
            Gets the current velocity of a servo.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.AdvancedServoServo.VelocityMax">
            <summary>
            Represents the largest velocity value that this motor will accept
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.AdvancedServoServo.VelocityMin">
            <summary>
            Represents the smallest velocity value that this motor will accept
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.AdvancedServoServo.Position">
            <summary>
            Gets / sets the position of a motor, in degrees.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.AdvancedServoServo.PositionMax">
            <summary>
            Represents the largest position value that this motor will accept.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.AdvancedServoServo.PositionMin">
            <summary>
            Represents the smallest position value that this motor will accept.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.AdvancedServoServo.Current">
            <summary>
            Gets the current consumption of a servo motor, in Amps.
            </summary>
        </member>
        <member name="P:Phidgets.AdvancedServoServo.Engaged">
            <summary>
            Gets or sets the engaged property of the servo motor.
            </summary>
            <remarks>
            <para>Setting this to true sends the servo to the currently set position - and holds it there. Setting this to
            false will send a pwm of 0 to the servo, which removes the holding force, so the servo can be freely rotated by hand.</para>
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.AdvancedServoServo.SpeedRamping">
            <summary>
            Gets or sets the SpeedRamping property of the servo motor.
            </summary>
            <remarks>
            Speed ramping means that acceleration and velocity are used to send a series of different PWM pulses over time.
            Without speed ramping, the PWM is just set to the target position immediately - this is how the original Phidget Servo worked.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.AdvancedServoServo.Stopped">
            <summary>
            Gets the stopped property of the servo.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.AdvancedServoServo.Type">
            <summary>
            Sets / Gets the type of servo. This determines how degrees are calculated from PCM pulses, and sets min and max angles.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="T:Phidgets.AdvancedServoServoCollection">
            <summary>
            This class represents the collection of servos related to a Phidget AdvancedServo.  
            All the methods and properties used to access the available servos are implemented in this class.
            </summary>
        </member>
        <member name="P:Phidgets.AdvancedServoServoCollection.Item(System.Int32)">
            <summary>
            Advanced Servo Servo indexer list
            </summary>
            <param name="index">The servo index.  Specifies which servo to access.</param>
            <returns>The AdvancedServo Servo object stored at that index that represents the corresponding servo motor.</returns>
        </member>
        <member name="T:Phidgets.Dictionary">
            <summary>
            This class represents the Phidget Dictionary.
            </summary>
            <remarks>
            See the Phidgets programming manual for more information on the Phidget Dictionary.
            </remarks>
        </member>
        <member name="M:Phidgets.Dictionary.#ctor">
            <summary>
            The default constructor.
            </summary>
        </member>
        <member name="M:Phidgets.Dictionary.Finalize">
            <summary>
            Class destructor/finalizer.
            </summary>
            <remarks>
            Will attempt to close the dictionary if it has yet to be closed.
            </remarks>
        </member>
        <member name="M:Phidgets.Dictionary.open(System.String,System.Int32)">
            <summary>
            Open this Dictionary remotely and securely, using an IP Address.
            </summary>
            <param name="IPAddress">IP Address or hostname of the Phidget Webservice</param>
            <param name="port">Port of the Phidget Webservice</param>
        </member>
        <member name="M:Phidgets.Dictionary.open(System.String)">
            <summary>
            Open this Dictionary remotely using a Server ID.
            </summary>
            <remarks>This version of open is network based.</remarks>
            <param name="ServerID">ServerID of the Phidget Webservice</param>
        </member>
        <member name="M:Phidgets.Dictionary.open(System.String,System.Int32,System.String)">
            <summary>
            Open this Dictionary remotely and securely, using an IP Address.
            </summary>
            <remarks>
            This method is the same as <see>open(String ipAddress, int port)</see>, except that it specifies a password. 
            This password can be set as a parameter when starting the Phidget Webservice.
            </remarks>
            <param name="IPAddress">IP Address or hostname of the Phidget Webservice</param>
            <param name="port">Port of the Phidget Webservice</param>
            <param name="password">Specified password</param>
        </member>
        <member name="M:Phidgets.Dictionary.open(System.String,System.String)">
            <summary>
            Open this Dictionary remotely and securely, using a Server ID.
            </summary>
            <remarks>
            This method is the same as <see>open(String serverID)</see>, except that it specifies a password. 
            This password can be set as a parameter when starting the Phidget Webservice.
            </remarks>
            <param name="ServerID">ServerID of the Phidget Webservice</param>
            <param name="password">Specified password</param>
        </member>
        <member name="M:Phidgets.Dictionary.close">
            <summary>
            Closes this Dictionary.
            </summary>
            <remarks>
            This will shut down all threads dealing with this Dictionary and you won't recieve any more events.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">if this Dictionary was not opened.</exception>
        </member>
        <member name="M:Phidgets.Dictionary.add(System.String,System.String,System.Boolean)">
            <summary>
            Adds a new key to the Dictionary, or modifies the value of an existing key.
            </summary>
            <param name="key">The key can only contain numbers, letters, ‘/’, ‘.’, ‘-‘, ‘_’, and must begin with a letter, ‘_’ or ‘/’.</param>
            <param name="value">The value can contain any characters.</param>
            <param name="persistent">The persistent value controls whether a key will stay in the dictionary after the client that created it disconnects. 
            If persistent is false, the key is removed when the connection closes. Otherwise the key remains in the dictionary until it is explicitly removed.</param>
            <exception cref="T:Phidgets.PhidgetException">If this Dictionary was not opened, or if the server is not connected.</exception>
        </member>
        <member name="M:Phidgets.Dictionary.add(System.String,System.String)">
            <summary>
            Adds a new key to the Dictionary, or modifies the value of an existing key.
            </summary>
            <remarks>The key will stay in the dictionary until explicitly removed.</remarks>
            <param name="key">The key can only contain numbers, letters, ‘/’, ‘.’, ‘-‘, ‘_’, and must begin with a letter, ‘_’ or ‘/’.</param>
            <param name="value">The value can contain any characters.</param>
            <exception cref="T:Phidgets.PhidgetException">If this Dictionary was not opened, or if the server is not connected.</exception>
        </member>
        <member name="M:Phidgets.Dictionary.remove(System.String)">
            <summary>
            Removes a key, or set of keys, from the Dictionary.
            </summary>
            <param name="keypattern">The key name is a regular expressions pattern, and so care must 
            be taken to only have it match the specific keys you want to remove.</param>
            <exception cref="T:Phidgets.PhidgetException">if this Dictionary was not opened.</exception>
            <exception cref="T:Phidgets.PhidgetException">If this Dictionary was not opened, or if the server is not connected.</exception>
        </member>
        <member name="M:Phidgets.Dictionary.get(System.String)">
            <summary>
            Gets the value for the provided key from the dictionary.
            </summary>
            <param name="key">The key for the entry in the dictionary.</param>
            <returns>The value from the entry in the dictionary assoiciated with the provided key.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Dictionary was not opened, or if the server is not connected.</exception>
        </member>
        <member name="E:Phidgets.Dictionary.Error">
            <summary>
            Error event.
            </summary>
            <remarks>
            The error event is called when an asyncronous error occurs. This is only used for network errors.
            </remarks>
        </member>
        <member name="E:Phidgets.Dictionary.ServerConnect">
            <summary>
            Server connect event
            </summary>
            <remarks>
            This is called when a connection to the Phidget Webservice has been established.
            </remarks>
        </member>
        <member name="E:Phidgets.Dictionary.ServerDisconnect">
            <summary>
            Server disconnect event
            </summary>
            <remarks>
            This is called when a connection to the Phidget Webservice has been broken - either by calling close, or by network trouble, etc.
            </remarks>
        </member>
        <member name="P:Phidgets.Dictionary.Address">
            <summary>
            Gets the Phidget Webservice network address.
            </summary>
            <remarks>
            This may be an IP Address or a hostname.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Dictionary was not opened, or if the server is not connected.</exception>
        </member>
        <member name="P:Phidgets.Dictionary.ServerID">
            <summary>
            Gets the Phidget Webservice server id.
            </summary>
            <remarks>
            This is an arbitrary server identifier, independant of IP address and Port. This is only available if the Dictionary was opened with ServerID.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Dictionary was not opened via ServerID, or if the server is not connected.</exception>
        </member>
        <member name="P:Phidgets.Dictionary.Port">
            <summary>
            Gets the Phidget Webservice port.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Dictionary was not opened, or if the server is not connected.</exception>
        </member>
        <member name="P:Phidgets.Dictionary.AttachedToServer">
            <summary>
            Gets the attached to server status.
            </summary>
            <remarks>
            Returns the status of the connection to the server.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Dictionary was not opened.</exception>
        </member>
        <member name="T:Phidgets.KeyListener">
            <summary>
            This class represents a key listener.
            </summary>
            <remarks>
            This key listener is used, along with the Dictionary object, to set up listener for specific keys, or groups of keys. 
            Events are available for key add or change, and for key removal.
            </remarks>
        </member>
        <member name="F:Phidgets.KeyListener.KeyPattern">
            <summary>
            The key pattern, as specified in the constructor.
            </summary>
        </member>
        <member name="M:Phidgets.KeyListener.#ctor(Phidgets.Dictionary,System.String)">
            <summary>
            Creates a new key listener, for a specific pattern, on a specific dictionary object. The pattern is a regular expression.
            </summary>
            <param name="Dict">The specific dictionary object</param>
            <param name="KeyPattern">The specific pattern.  It is a regular expression.</param>
        </member>
        <member name="M:Phidgets.KeyListener.start">
            <summary>
            Starts this key listener.
            </summary>
            <remarks>
            This method must be called after the dictionary is connected, such as in the dictionary serverConnect event handler.
            </remarks>
        </member>
        <member name="M:Phidgets.KeyListener.stop">
            <summary>
            Stops this key listener.
            </summary>
        </member>
        <member name="E:Phidgets.KeyListener.KeyChange">
            <summary>
            Key change / add event.
            </summary>
            <remarks>
            This event is called for both new keys, and key changes, for all keys matching the specified key pattern.
            </remarks>
        </member>
        <member name="E:Phidgets.KeyListener.KeyRemoval">
            <summary>
            Key removal event.
            </summary>
            <remarks>
            This event is called when matching keys are removed.
            </remarks>
        </member>
        <member name="T:Phidgets.Stepper">
            <summary>
            This class represents a Phidget Stepper Controller.
            </summary>
        </member>
        <member name="F:Phidgets.Stepper.steppers">
            <summary>
            The collection of stepper motors.
            </summary>
        </member>
        <member name="F:Phidgets.Stepper.inputs">
            <summary>
            The collection of digital inputs
            </summary>
            <remarks>
            Not all Stepper controllers have digital inputs.
            </remarks>
        </member>
        <member name="M:Phidgets.Stepper.#ctor">
            <summary>
            Class Constructor.
            </summary>
            <remarks>
            Calling this opens a connection to the phidget21 C library creates an internal handle for this Phidget, ready to call open on.
            </remarks>
        </member>
        <member name="M:Phidgets.Stepper.Finalize">
            <summary>
            Class destructor/finalizer.
            </summary>
            <remarks>
            Will attempt to close the phidget if it has yet to be closed.
            </remarks>
        </member>
        <member name="E:Phidgets.Stepper.InputChange">
            <summary>
            Input change event.
            </summary>
            <remarks>
            This event is called what a digital input changes.
            </remarks>
        </member>
        <member name="E:Phidgets.Stepper.PositionChange">
            <summary>
            Position change event.
            </summary>
            <remarks>This event is called when the stepper position changes.</remarks>
        </member>
        <member name="E:Phidgets.Stepper.CurrentChange">
            <summary>
            Current change handler.
            </summary>
            <remarks>
            This event is called when current consumption of a stepper changes. Not all stepper controllers support current sense.
            </remarks>
        </member>
        <member name="E:Phidgets.Stepper.VelocityChange">
            <summary>
            Velocity change handler.
            </summary>
            <remarks>
            This event is called when a stepper velocity changes.
            </remarks>
        </member>
        <member name="T:Phidgets.PHSensor">
            <summary>
            This class represents a Phidget PH Sensor. All methods to read PH data from the PH Sensor are implemented in this class.
            </summary>
            <remarks>
            The Phidget PH Sensor provides one standard PH sensor input.
            </remarks>
        </member>
        <member name="F:Phidgets.PHSensor.sensor">
            <summary>
            The Phidget PHSensor sensor.
            </summary>
        </member>
        <member name="M:Phidgets.PHSensor.#ctor">
            <summary>
            Class Constructor.
            </summary>
            <remarks>
            Calling this opens a connection to the phidget21 C library creates an internal handle for this Phidget, ready to call open on.
            </remarks>
        </member>
        <member name="M:Phidgets.PHSensor.Finalize">
            <summary>
            Class destructor/finalizer.
            </summary>
            <remarks>
            Will attempt to close the phidget if it has yet to be closed.
            </remarks>
        </member>
        <member name="E:Phidgets.PHSensor.PHChange">
            <summary>
            PH Change Event.
            </summary>
            <remarks>
            <para>The ph change handler is called when the pH has changed by at least the Sensitivity that has been set.</para>
            </remarks>
        </member>
        <member name="T:Phidgets.InterfaceKit">
            <summary>
            This class represents a Phidget Interface Kit. All methods to read and write data to and from an Interface Kit are implemented in this class.
            </summary>
            <remarks>
            <para>There are many types of Interface Kits, but each is simply a collection of 0 or more digital inputs, digital outpus and analog sensors. 
            Inputs can be read and outputs can be set, and event handlers can be set for each of these.</para>
            <para>See your hardware documentation for more information on the I/O specific to your Phidget.</para>
            </remarks>
        </member>
        <member name="F:Phidgets.InterfaceKit.inputs">
            <summary>
            The collection of available digital inputs.
            </summary>
            <remarks>
            Interface Kits can have 0 or more digital inputs. See your hardware documentation for more information on the I/O specific to your Phidget.
            </remarks>
        </member>
        <member name="F:Phidgets.InterfaceKit.outputs">
            <summary>
            The collection of available digital outputs.
            </summary>
            <remarks>
            Interface Kits can have 0 or more digital outputs. See your hardware documentation for more information on the I/O specific to your Phidget.
            </remarks>
        </member>
        <member name="F:Phidgets.InterfaceKit.sensors">
            <summary>
            The collection of available analog sensor inputs.
            </summary>
            <remarks>
            Interface Kits can have 0 or more analog sensor inputs. See your hardware documentation for more information on the I/O specific to your Phidget.
            </remarks>
        </member>
        <member name="M:Phidgets.InterfaceKit.#ctor">
            <summary>
            Class Constructor.
            </summary>
            <remarks>Calling this opens a connection to the phidget21 C library creates an internal handle for this Phidget, ready to call open on.</remarks>
        </member>
        <member name="M:Phidgets.InterfaceKit.Finalize">
            <summary>
            Class destructor/finalizer.
            </summary>
            <remarks>Will attempt to close the phidget if it has yet to be closed.</remarks>
        </member>
        <member name="P:Phidgets.InterfaceKit.ratiometric">
            <summary>
            Sets whether to use a ratiometric or fixed reference on the analog inputs.
            </summary>
            <remarks>
            <para>Most sensors use the ratiometric model, where the returned value will be between 0 and +Vdd, where Vdd is the voltage supplied
            to the sensor - approximately 5v.</para>
            <para>Some sensors output a specific voltage regardless of their supply voltage, and for these we provide a non-ratiometric
            fixed +5v reference.</para>
            <para>The default value for this is ratiometric (true).</para>
            <para>This only applies to interfacekit boards with analog inputs (8/8/8, TextLCD 8/8/8).</para>
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If ratiometric is not supported, or the InterfaceKit is not opened and attached.</exception>
        </member>
        <member name="E:Phidgets.InterfaceKit.InputChange">
            <summary>
            Digital inputs change event
            </summary>
            <remarks>
            <para>The input change handler is called when an input on this InteraceKit board has changed.</para>
            </remarks>
        </member>
        <member name="E:Phidgets.InterfaceKit.SensorChange">
            <summary>
            Analog input change event.
            </summary>
            <remarks>
            <para>The sensor change handler is called when a sensor on this Interface Kit has changed by at least the 
            Sensitivity value that has been set for this input.</para>
            </remarks>
        </member>
        <member name="E:Phidgets.InterfaceKit.OutputChange">
            <summary>
            Digital output change handler.
            </summary>
            <remarks>
            <para>The output change handler is called when an output on this InteraceKit board has changed.</para>
            </remarks>
        </member>
        <member name="T:Phidgets.Encoder">
            <summary>
            This class represents a Phidget Encoder. All methods to read encoder data from an encoder are implemented in this class.
            </summary>
            <remarks>
            Phidget Encoder boards generally support 1 or more encoders with 0 or more digital inputs. 
            Both high speed optical and low speed mechanical encoders are supported with this API.
            </remarks>
        </member>
        <member name="F:Phidgets.Encoder.encoders">
            <summary>
            The collection of available encoders.
            </summary>
            <remarks>
            Phidget Encoder boards support 1 or more encoders.
            </remarks>
        </member>
        <member name="F:Phidgets.Encoder.encodersWithEnable">
            <summary>
            A collection of encoders with support for index and enable.
            </summary>
        </member>
        <member name="F:Phidgets.Encoder.inputs">
            <summary>
            The collecton of available digital inputs.
            </summary>
            <remarks>
            Phidget Encoder boards generally support 0 or more digital inputs.
            </remarks>
        </member>
        <member name="M:Phidgets.Encoder.#ctor">
            <summary>
            The constructor for the Encoder class.
            </summary>
        </member>
        <member name="M:Phidgets.Encoder.Finalize">
            <summary>
            The destructor/finalizer for the Encoder class.
            </summary>
            <remarks>
            Will attempt to close the phidget if it has yet to be closed.
            </remarks>
        </member>
        <member name="E:Phidgets.Encoder.PositionChange">
            <summary>
            Position change event
            </summary>
            <remarks>
            <para>The position change event provides data about how many ticks have occured, 
            and how much time has passed since the last position change event, but does not contain an absolute position. 
            This can be obtained from getEncoderPosition.</para>
            </remarks>
        </member>
        <member name="E:Phidgets.Encoder.InputChange">
            <summary>
            Digital input change event.
            </summary>
            <remarks>
            <para>The input change handler is called when a digital input on this Encoder board has changed.</para>
            </remarks>
        </member>
        <member name="T:Phidgets.Spatial">
            <summary>
            This class represents a Phidget Spatial board.
            </summary>
        </member>
        <member name="F:Phidgets.Spatial.accelerometerAxes">
            <summary>
            Collection of accelerometer axes.
            </summary>
        </member>
        <member name="F:Phidgets.Spatial.gyroAxes">
            <summary>
            Collection of gyroscope axes.
            </summary>
        </member>
        <member name="F:Phidgets.Spatial.compassAxes">
            <summary>
            Collection of compass axes.
            </summary>
        </member>
        <member name="M:Phidgets.Spatial.#ctor">
            <summary>
            Class Constructor.
            </summary>
            <remarks>
            Calling this opens a connection to the phidget21 C library creates an internal handle for this Phidget, ready to call open on.
            </remarks>
        </member>
        <member name="M:Phidgets.Spatial.Finalize">
            <summary>
            Class destructor/finalizer.
            </summary>
            <remarks>
            Will attempt to close the phidget if it has yet to be closed.
            </remarks>
        </member>
        <member name="M:Phidgets.Spatial.zeroGyro">
            <summary>
            Zeroes the gyro.
            </summary>
            <remarks>
            This takes 1-2 seconds to complete and should only be called when the board is stationary.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if this Phidget does not have a gyro.</exception>
        </member>
        <member name="M:Phidgets.Spatial.setCompassCorrectionParameters(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets correction paramaters for the magnetometer triad. This is for filtering out hard and soft iron offsets, and scaling the output to match the local field strength.
            These parameters can be obtained from the compass calibration program provided by Phidgets Inc.
            </summary>
        </member>
        <member name="M:Phidgets.Spatial.resetCompassCorrectionParameters">
            <summary>
            Resets correction paramaters for the magnetometer triad. This returns magnetometer output to raw magnetic field strength.
            </summary>
        </member>
        <member name="E:Phidgets.Spatial.SpatialData">
            <summary>
            Spatial data event.
            </summary>
            <remarks><para>Contains data for acceleration/gyro/compass depending on what the board supports, as well as a timestamp.</para>
            <para>This event is fired at a fixed rate as determined by the DataRate property.</para></remarks>
        </member>
        <member name="P:Phidgets.Spatial.DataRate">
            <summary>
            Gets / sets the event data rate in ms.
            </summary>
            <remarks>Data rate needs to be between DataRateMin and DataRateMax.</remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or the data rate is out of range.</exception>
        </member>
        <member name="P:Phidgets.Spatial.DataRateMax">
            <summary>
            Gets the maximum supported data rate in ms.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.Spatial.DataRateMin">
            <summary>
            Gets the minimum supported data rate in ms.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="T:Phidgets.WeightSensorSensor">
            <summary>
            This class represents the weight sensor on a Phidget Weight Sensor board.
            </summary>
        </member>
        <member name="P:Phidgets.WeightSensorSensor.Weight">
            <summary>
            Gets the sensed weight in kg.
            </summary>
            <remarks>
            This weight is in kg (kilograms), but can easily be converted into other units.  The accuracy, sesitivity and range depends on the scale and version.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.WeightSensorSensor.Sensitivity">
            <summary>
            Gets or sets the weight change trigger.
            </summary>
            <remarks>
            This is the ammount by which the sensed weight must change between WeightChangeEvents. By default this is set to 5.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="T:Phidgets.MotorControl">
            <summary>
            This class represents a Phidget Motor Controller. All methods to to control a motor controller and read back motor data are implemented in this class.
            </summary>
            <remarks>
            <para>The Motor Control Phidget is able to control 1 or more DC motors. Both speed and acceleration are controllable. 
            Speed is controlled via PWM. The size of the motors that can be driven depends on the motor controller. 
            See your hardware documentation for more information.</para>
            <para>The motor Controller boards also has 0 or more digital inputs.</para>
            </remarks>
        </member>
        <member name="F:Phidgets.MotorControl.motors">
            <summary>
            The collection of available motors.
            </summary>
            <remarks>The Motor Control Phidget is able to control 1 or more DC motors.</remarks>
        </member>
        <member name="F:Phidgets.MotorControl.inputs">
            <summary>
            The collection of available digital inputs.
            </summary>
            <remarks>The motor Controller boards has 0 or more digital inputs.</remarks>
        </member>
        <member name="M:Phidgets.MotorControl.#ctor">
            <summary>
            Class Constructor.
            </summary>
            <remarks>Calling this opens a connection to the phidget21 C library creates an internal handle for this Phidget, ready to call open on.</remarks>
        </member>
        <member name="M:Phidgets.MotorControl.Finalize">
            <summary>
            Class destructor/finalizer.
            </summary>
            <remarks>Will attempt to close the phidget if it has yet to be closed.</remarks>
        </member>
        <member name="P:Phidgets.MotorControl.Ratiometric">
            <summary>
            Sets whether to use a ratiometric or fixed reference on the analog inputs.
            </summary>
            <remarks>
            <para>Most sensors use the ratiometric model, where the returned value will be between 0 and +Vdd, where Vdd is the voltage supplied
            to the sensor - approximately 5v.</para>
            <para>Some sensors output a specific voltage regardless of their supply voltage, and for these we provide a non-ratiometric
            fixed +5v reference.</para>
            <para>The default value for this is ratiometric (true).</para>
            <para>This only applies to boards with analog sensor inputs</para>
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If ratiometric is not supported, or the Phidget is not opened and attached.</exception>
        </member>
        <member name="E:Phidgets.MotorControl.VelocityChange">
            <summary>
            Velocity Change Event.
            </summary>
            <remarks>
            <para>The velocity change handler is called when the velocity of a motor changes. 
            These velocity changes are reported back from the Motor Controller and correspond to changing PWM duty cycle rather then actual motor speed.</para>
            </remarks>
        </member>
        <member name="E:Phidgets.MotorControl.CurrentChange">
            <summary>
            Current Change Event.
            </summary>
            <remarks>
            <para>The current change handler is called when the current consumed by a motor changes.</para>
            </remarks>
        </member>
        <member name="E:Phidgets.MotorControl.InputChange">
            <summary>
            Digital Input Change Event.
            </summary>
            <remarks>
            <para>The input change handler is called when a digital input on this MotorControl board has changed.</para>
            </remarks>
        </member>
        <member name="E:Phidgets.MotorControl.SensorUpdate">
            <summary>
            Analog input update event.
            </summary>
            <remarks>
            <para>The sensor update handler is called at a steady rate of 8ms.</para>
            </remarks>
        </member>
        <member name="E:Phidgets.MotorControl.EncoderPositionChange">
            <summary>
            Position change event
            </summary>
            <remarks>
            <para>The position change event provides data about how many ticks have occured, 
            and how much time has passed since the last position change event, but does not contain an absolute position. 
            This can be obtained from getEncoderPosition.</para>
            </remarks>
        </member>
        <member name="E:Phidgets.MotorControl.EncoderPositionUpdate">
            <summary>
            Position update event
            </summary>
            <remarks>
            <para>The position update event provides data about how many ticks have occured since the last update event. 
            It is called at a steady rate of 8ms. 
            </para>
            </remarks>
        </member>
        <member name="E:Phidgets.MotorControl.BackEMFUpdate">
            <summary>
            Back EMF Update Event.
            </summary>
            <remarks>
            <para>The Back EMF update handler is called at a steady rate of 16ms, when BackEMF sensing is enabled.</para>
            </remarks>
        </member>
        <member name="E:Phidgets.MotorControl.CurrentUpdate">
            <summary>
            Current Update Event.
            </summary>
            <remarks>
            <para>The current update handler is called at a set rate of 8ms for 1065 and 32ms for 1064.</para>
            </remarks>
        </member>
        <member name="T:Phidgets.Analog">
            <summary>
            This class represents a Phidget Analog. All methods to control a Phidget Analog are implemented in this class.
            </summary>
        </member>
        <member name="F:Phidgets.Analog.outputs">
            <summary>
            The collection of available inputs.
            </summary>
        </member>
        <member name="M:Phidgets.Analog.#ctor">
            <summary>
            Class Constructor.
            </summary>
            <remarks>Calling this opens a connection to the phidget21 C library creates an internal handle for this Phidget, ready to call open on.</remarks>
        </member>
        <member name="M:Phidgets.Analog.Finalize">
            <summary>
            Class destructor/finalizer.
            </summary>
            <remarks>Will attempt to close the phidget if it has yet to be closed.</remarks>
        </member>
        <member name="T:Phidgets.StepperStepper">
            <summary>
            This class represents a stepper motor attached to a Phidget Stepper Controller.
            </summary>
        </member>
        <member name="P:Phidgets.StepperStepper.Acceleration">
            <summary>
            Gets or sets a motor's acceleration.
            </summary>
            <remarks>
            The valid range is between AccelerationMin and AccelerationMax. This controls how fast the motor changes speed.
            This value is in (micro)steps per second squared. The step unit will depend on the Stepper Controller. 
            For example, the Bipolar Stepper controller has an accuracy of 16th steps, so this value would be in 
            16th steps per second squared. 
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if acceleration is out of range.</exception>
        </member>
        <member name="P:Phidgets.StepperStepper.AccelerationMax">
            <summary>
            Represents the largest acceleration value that this motor will accept
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.StepperStepper.AccelerationMin">
            <summary>
            Represents the smallest acceleration value that this motor will accept
            </summary>
            <remarks>
            Note that an acceleration of 0 is not a valid value.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.StepperStepper.Velocity">
            <summary>
            Returns a motor's current velocity.
            </summary>
            <remarks>
            The valid range is between VelocityMin and VelocityMax, with 0 being stopped.
            This value is in (micro)steps per second. The step unit will depend on the Stepper Controller. 
            For example, the Bipolar Stepper controller has an accuracy of 16th steps, so this value would be in 16th steps per second. 
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the velocity in unknown.</exception>
        </member>
        <member name="P:Phidgets.StepperStepper.VelocityLimit">
            <summary>
            Gets or sets a motor's velocity limit.
            </summary>
            <remarks>
            This is the maximum velocity that the motor will turn at. The valid range is between VelocityMin and VelocityMax, 
            with 0 being stopped.
            This value is in (micro)steps per second. The step unit will depend on the Stepper Controller. 
            For example, the Bipolar Stepper controller has an accuracy of 16th steps, so this value would be in 16th steps per second.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the value is out of range.</exception>
        </member>
        <member name="P:Phidgets.StepperStepper.VelocityMax">
            <summary>
            Represents the largest velocity value that this motor will accept
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.StepperStepper.VelocityMin">
            <summary>
            Represents the smallest velocity value that this motor will accept
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.StepperStepper.TargetPosition">
            <summary>
            Gets or sets a motor's target position.
            </summary>
            <remarks>
            Use this to set the target position for the stepper. If the stepper is engaged it will start moving towards this target position. 
            Can also be used to get the currently set target position.
            The valid range is between PositionMin and PositionMax.
            This value is in (micro)steps. The step unit will depend on the Stepper Controller. 
            For example, the Bipolar Stepper controller has an accuracy of 16th steps, so this value would be in 16th steps. 
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the position in unknown.</exception>
        </member>
        <member name="P:Phidgets.StepperStepper.CurrentPosition">
            <summary>
            Gets or sets a motor's current position.
            </summary>
            <remarks>
            Use this to (re)set the current physical position of the motor to a specific position value or to get the current position 
            for the motor. 
            This does not move the motor, and if the motor is moving, setting a value to this will cause it to stop moving. 
            Set TargetPosition value to move the motor to a position.
            The valid range is between PositionMin and PositionMax.
            This value is in (micro)steps. The step unit will depend on the Stepper Controller. For example, the Bipolar 
            Stepper controller has an accuracy of 16th steps, so this value would be in 16th steps.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the position in unknown.</exception>
        </member>
        <member name="P:Phidgets.StepperStepper.PositionMax">
            <summary>
            Represents the largest position value that this motor will accept
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.StepperStepper.PositionMin">
            <summary>
            Represents the smallest position value that this motor will accept
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.StepperStepper.CurrentLimit">
            <summary>
            Gets or sets a motor's current usage limit.
            </summary>
            <remarks>
            The valid range is between CurrentMin and CurrentMax.
            This sets the maximum current that a motor will be allowed to draw. 
            Use this with the Bipolar stepper controller to get smooth micro stepping - see the product manual for more details. 
            This value is in Amps.
            Note that this is not supported on all stepper controllers. 
            </remarks>
            <value>Requested current limit for the motor.</value>
            <returns>Currently set current limit for the motor.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, if the value is unknown, or if this is not supported.</exception>
        </member>
        <member name="P:Phidgets.StepperStepper.Current">
            <summary>
            Returns a motor's current usage.
            </summary>
            <remarks>
            The valid range is between CurrentMin and CurrentMax. This value is in Amps. 
            </remarks>
            <returns>The current usage of the motor.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, if the value is unknown, or if this is not supported.</exception>
        </member>
        <member name="P:Phidgets.StepperStepper.CurrentMax">
            <summary>
            Represents the largest current value that this motor will accept
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.StepperStepper.CurrentMin">
            <summary>
            Represents the smallest current value that this motor will accept
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.StepperStepper.Engaged">
            <summary>
            Gets or sets the engaged property of the stepper motor.
            </summary>
            <remarks>
            This engages or disengages the stepper motor. The motors are by default disengaged when the stepper controller is plugged in. 
            When the stepper is disengaged, position, velocity, etc. can all be set, but the motor will not start moving until it is engaged. 
            If position is read when a motor is disengaged, it will throw an exception. 
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.StepperStepper.Stopped">
            <summary>
            Gets the stopped property of the stepper motor.
            </summary>
            <remarks>
            Use this to determine if the motor is moving and/or up to date with the latest commands you have sent. 
            If this is true, the motor is guaranteed to be stopped and to have processed every command issued.
            Generally, this would be polled after a target position is set to wait until that position is reached. 
            </remarks>
            <returns>The stopped state of a motor.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="T:Phidgets.StepperStepperCollection">
            <summary>
            This class represents a collection of stepper motors.
            </summary>
        </member>
        <member name="P:Phidgets.StepperStepperCollection.Item(System.Int32)">
            <summary>
            The stepper motor indexer list. This returns the stepper motor object at the supplied index in the list.
            </summary>
            <remarks>
            Provides access to the properties associated with the currently indexes stepper motor.
            </remarks>
            <param name="index">Index of the motor.</param>
            <returns>The stepper object at the provided index.</returns>
        </member>
        <member name="T:Phidgets.StepperDigitalInputCollection">
            <summary>
            This class represents a collection of Digital Inputs.
            </summary>
            <remarks>
            This class contains the count of the available digital inputs and the digital input indexer to access the digital inputs.
            </remarks>
        </member>
        <member name="P:Phidgets.StepperDigitalInputCollection.Item(System.Int32)">
            <summary>
            The digital input indexer list. This gets the state of a digital input at the supplied index in the list.
            </summary>
            <remarks>
            Digital inputs read True where they are activated and false when they are in their default state.
            </remarks>
            <param name="index">Index of the input.</param>
            <returns>State of the input.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the index is out of range.</exception>
        </member>
        <member name="P:Phidgets.StepperDigitalInputCollection.Count">
            <summary>
            Returns the number of ditigal inputs on this Interface Kit.
            </summary>
            <remarks>
            Not all steppers have the same number of digital inputs, and some don't have any digital inputs at all.
            </remarks>
            <value>Number of digital inputs.</value>
            <returns>Number of digital inputs.</returns>
        </member>
        <member name="T:Phidgets.BridgeInput">
            <summary>
            Represents an input on a Phidget bridge.
            </summary>
        </member>
        <member name="P:Phidgets.BridgeInput.BridgeValue">
            <summary>
            Gets the value of this input, in mV/V.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or the value is unknown.</exception>
        </member>
        <member name="P:Phidgets.BridgeInput.BridgeMax">
            <summary>
            Gets the maximum supported input value in mV/V.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.BridgeInput.BridgeMin">
            <summary>
            Gets the minimum supported input value in mV/V.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.BridgeInput.Enabled">
            <summary>
            Gets/Sets the enabled state of this input.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.BridgeInput.Gain">
            <summary>
            Gets/Sets the gain for this input.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or the value is unknown.</exception>
        </member>
        <member name="T:Phidgets.BridgeInput.Gains">
            <summary>
            Supported gains.
            </summary>
        </member>
        <member name="T:Phidgets.BridgeInputCollection">
            <summary>
            This class represents a collection of frequency counter inputs.
            </summary>
        </member>
        <member name="T:Phidgets.WeightSensor">
            <summary>
            This class represents a Phidget Weight Sensor. All methods to read weight data from the weight sensor are implemented in this class.
            </summary>
            <remarks>
            The Phidget Weight Sensor is simply an electronic scale with a USB interface. It provides one weight value, in kg.
            </remarks>
        </member>
        <member name="F:Phidgets.WeightSensor.sensor">
            <summary>
            The Phidget Weight Sensor's weight sensor object.
            </summary>
            <remarks>
            This object represents the physical weight sensor on the board and the data it holds.
            </remarks>
        </member>
        <member name="M:Phidgets.WeightSensor.#ctor">
            <summary>
            Class Constructor.
            </summary>
            <remarks>
            Calling this opens a connection to the phidget21 C library creates an internal handle for this Phidget, ready to call open on.
            </remarks>
        </member>
        <member name="M:Phidgets.WeightSensor.Finalize">
            <summary>
            Class destructor/finalizer.
            </summary>
            <remarks>
            Will attempt to close the phidget if it has yet to be closed.
            </remarks>
        </member>
        <member name="E:Phidgets.WeightSensor.WeightChange">
            <summary>
            Weight Change Event.
            </summary>
            <remarks>
            The weight change handler is called when the weight has changed by at least the Sensitivity trigger that has been set.
            </remarks>
        </member>
        <member name="T:Phidgets.Servo">
            <summary>
            This class represents a Phidget servo Controller. All methods to control a Servo Controller are implemented in this class.
            </summary>
            <remarks>
            The Phidget Sevo controller simply outputs varying widths of PWM, which is what most servo motors take as an input driving signal.
            </remarks>
        </member>
        <member name="F:Phidgets.Servo.servos">
            <summary>
            The collection of available servos.
            </summary>
            <remarks>
            Note that there is no way of programatically determining how many motors are actually attached to the board.
            </remarks>
        </member>
        <member name="M:Phidgets.Servo.#ctor">
            <summary>
            Class Constructor.
            </summary>
            <remarks>
            Calling this opens a connection to the phidget21 C library creates an internal handle for this Phidget, ready to call open on.
            </remarks>
        </member>
        <member name="M:Phidgets.Servo.Finalize">
            <summary>
            Class destructor/finalizer.
            </summary>
            <remarks>
            Will attempt to close the phidget if it has yet to be closed.
            </remarks>
        </member>
        <member name="E:Phidgets.Servo.PositionChange">
            <summary>
            Position Change Event.
            </summary>
            <remarks>
            <para>The servo position change handler is called when the servo position has changed. 
            The event will get fired after every modification made to the Position property of a Servo motor.</para>
            </remarks>
        </member>
        <member name="T:Phidgets.TextLCD">
            <summary>
            This class represents a Phidget Text LCD. All methods to control the Text LCD are implemented in this class.
            </summary>
            <remarks>
            The TextLCD Phidget consists of a display that is capable of displaying Standard as well as custom characters in multiple rows.
            </remarks>
        </member>
        <member name="F:Phidgets.TextLCD.rows">
            <summary>
            The collection of available rows of text display on the TextLCD screen.
            </summary>
        </member>
        <member name="F:Phidgets.TextLCD.screens">
            <summary>
            The collection of available screens on the TextLCD.
            </summary>
        </member>
        <member name="F:Phidgets.TextLCD.customCharacters">
            <summary>
            The collection of defined custom characters.
            </summary>
            <remarks>
            A maximum of 8 cutom characters can be defined at a time for the TextLCD.
            </remarks>
        </member>
        <member name="M:Phidgets.TextLCD.#ctor">
            <summary>
            Class Constructor.
            </summary>
            <remarks>
            Calling this opens a connection to the phidget21 C library creates an internal handle for this Phidget, ready to call open on.
            </remarks>
        </member>
        <member name="M:Phidgets.TextLCD.Finalize">
            <summary>
            Class destructor/finalizer
            </summary>
            <remarks>
            Will attempt to close the phidget if it has yet to be closed.
            </remarks>
        </member>
        <member name="M:Phidgets.TextLCD.initialize">
            <summary>
            Initializes the active screen
            </summary>
            <remarks>
            Only usable for the TextLCD Adapter.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.TextLCD.Backlight">
            <summary>
            Gets or sets the status of the backlight property.
            </summary>
            <remarks>
            True indicates that the backlight is on, False indicates that it is off. The default state depends on the board.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.TextLCD.Brightness">
            <summary>
            Gets or sets the status of the Brightness property.
            </summary>
            <remarks>
            For devices that support a range of backlight brightnesses.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or brightness is not supported.</exception>
        </member>
        <member name="P:Phidgets.TextLCD.Cursor">
            <summary>
            Gets or sets the status of the cursor property.
            </summary>
            <remarks>
            True turns the cursor is on, False turns it off. The cursor is an underscore which appears directly to the right of the 
            last entered character on the display. The cursor is by default disabled.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.TextLCD.CursorBlink">
            <summary>
            Gets or sets the status of the cursor blink property.
            </summary>
            <remarks>
            True turns the cursor blink on, False turns it off. The cursor blink is an flashing box which appears 
            directly to the right of the last entered character on the display, in the same spot as the cursor if it is enabled. 
            The cursor blink is by default disabled.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.TextLCD.Contrast">
            <summary>
            Gets or sets the value of the contrast property.
            </summary>
            <remarks>
            This is the contrast of the entire display.  The valid range is 0-255. Changing the contrast can increase the readability of 
            the display in certain viewing situation, such as at an odd angle.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or the contrast value is out of range.</exception>
        </member>
        <member name="P:Phidgets.TextLCD.ScreenCount">
            <summary>
            Gets the number of supported screens
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or the contrast value is out of range.</exception>
        </member>
        <member name="P:Phidgets.TextLCD.Screen">
            <summary>
            Gets or sets the active screen
            </summary>
            <remarks>
            This sets the screen that all other API calls will apply to - only required for multi-screen TextLCDs.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or the contrast value is out of range.</exception>
        </member>
        <member name="P:Phidgets.TextLCD.ScreenSize">
            <summary>
            Gets or sets the screen size
            </summary>
            <remarks>
            Only settable for the TextLCD Adapter.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or the contrast value is out of range.</exception>
        </member>
        <member name="T:Phidgets.Events.AttachEventArgs">
            <summary>
            Attach event data and information will be stored in this class.
            </summary>
            <remarks>
            The data stored in this event args class is a reference to the Phidget object that triggered the event.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.AttachEventArgs.Device">
            <summary>
            Reference to the Phidget object from which this event originated
            </summary>
        </member>
        <member name="T:Phidgets.Events.DetachEventArgs">
            <summary>
            Detach event data and information will be stored in this class.
            </summary>
            <remarks>
            The data stored in this event args class is a reference to the Phidget object that triggered the event.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.DetachEventArgs.Device">
            <summary>
            Reference to the Phidget object from which this event originated
            </summary>
        </member>
        <member name="T:Phidgets.Events.ServerConnectEventArgs">
            <summary>
            Server connect event data and information will be stored in this class.
            </summary>
            <remarks>
            The data stored in this event args class is a reference to the Phidget, or Dictionary, or Manager object that triggered the event.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.ServerConnectEventArgs.Device">
            <summary>
            Reference to the Phidget, or Dictionary, or Manager object from which this event originated
            </summary>
        </member>
        <member name="T:Phidgets.Events.ServerDisconnectEventArgs">
            <summary>
            Server Disconnect event data and information will be stored in this class.
            </summary>
            <remarks>
            The data stored in this event args class is a reference to the Phidget, or Dictionary, or Manager object that triggered the event.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.ServerDisconnectEventArgs.Device">
            <summary>
            Reference to the Phidget, or Dictionary, or Manager object from which this event originated
            </summary>
        </member>
        <member name="T:Phidgets.Events.ErrorEventArgs">
            <summary>
            Error event data and information will be stored in this class.
            </summary>
            <remarks>
            The data stored in this event args class is the error description and the error code.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.ErrorEventArgs.exception">
            <summary>
            The reference to the phidget exception that was thrown.
            </summary>
        </member>
        <member name="P:Phidgets.Events.ErrorEventArgs.Description">
            <summary>
            The reference to the error description string generated by the event.
            </summary>
        </member>
        <member name="P:Phidgets.Events.ErrorEventArgs.Code">
            <summary>
            The reference to the error code value generated by the event.
            </summary>
        </member>
        <member name="T:Phidgets.Events.SensorChangeEventArgs">
            <summary>
            Analog Sensor Change Event data and information will be stored in this class.
            </summary>
            <remarks>
            Data specific to this event args class are the index of the analog sensor input that is changing and the sensor value read.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.SensorChangeEventArgs.Index">
            <summary>
            The reference to the analog sensor input index from which this event originated.
            </summary>
        </member>
        <member name="F:Phidgets.Events.SensorChangeEventArgs.Value">
            <summary>
            The reference to the value of the sensor.
            </summary>
            <remarks>This value can range from 0-1000.</remarks>
        </member>
        <member name="T:Phidgets.Events.InputChangeEventArgs">
            <summary>
            Input Change Event data and information will be stored in this class.
            </summary>
            <remarks>
            Data specific to this event args class are the index of the digital input that is changing and the state value read.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.InputChangeEventArgs.Index">
            <summary>
            The reference to the digital input index from which this event originated.
            </summary>
        </member>
        <member name="F:Phidgets.Events.InputChangeEventArgs.Value">
            <summary>
            The reference to the bool state value that was read to generate the event.
            </summary>
            <remarks>True indicates that it is activated, False indicated the default state.</remarks>
        </member>
        <member name="T:Phidgets.Events.OutputChangeEventArgs">
            <summary>
            Output Change Event data and information will be stored in this class.
            </summary>
            <remarks>
            Data specific to this event args class are the index of the digital output that is changing and the state value read.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.OutputChangeEventArgs.Index">
            <summary>
            The reference to the index of the output.
            </summary>
        </member>
        <member name="F:Phidgets.Events.OutputChangeEventArgs.Value">
            <summary>
            The reference to the state of the output.
            </summary>
            <remarks>True indicated that the output is active, False indicated the default inactive state.</remarks>
        </member>
        <member name="T:Phidgets.Events.EncoderPositionChangeEventArgs">
            <summary>
            Encoder Position Change Event data and information will be stored in this class.
            </summary>
            <remarks>
            Data specific to this event args class are the index of the encoder that is changing, the position change value read, and the elapsed time between position changes.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.EncoderPositionChangeEventArgs.Index">
            <summary>
            The reference to the encoder index from which this event originated.
            </summary>
        </member>
        <member name="F:Phidgets.Events.EncoderPositionChangeEventArgs.PositionChange">
            <summary>
            The reference to the position change value that was read to generate the event.
            </summary>
            <remarks>This is the ammount of change in the encoder's position since the last EncoderPositionChangeEvent.</remarks>
        </member>
        <member name="P:Phidgets.Events.EncoderPositionChangeEventArgs.Time">
            <summary>
            The reference to the elapsed time between change events.
            </summary>
            <remarks>This is the time since the last EncoderPositionChangeEvent. Time unit depends on the Phidget - see product manual for specifics.</remarks>
        </member>
        <member name="T:Phidgets.Events.AccelerationChangeEventArgs">
            <summary>
            Acceleration Change Event data and information will be stored in this class.
            </summary>
            <remarks>
            Data specific to this event args class are the index of the axis that is changing and the acceleration value read.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.AccelerationChangeEventArgs.Index">
            <summary>
            The reference to the axis index from which this event originated.
            </summary>
        </member>
        <member name="F:Phidgets.Events.AccelerationChangeEventArgs.Acceleration">
            <summary>
            The reference to the acceleration value that was read to generate the event.
            </summary>
        </member>
        <member name="T:Phidgets.Events.VelocityChangeEventArgs">
            <summary>
            Velocity Change Event data and information will be stored in this class.
            </summary>
            <remarks>
            Data specific to this event args class are the index of the motor whose velocity is changing and the velocity value read.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.VelocityChangeEventArgs.Index">
            <summary>
            The reference to the index of the motor.
            </summary>
        </member>
        <member name="F:Phidgets.Events.VelocityChangeEventArgs.Velocity">
            <summary>
            The reference to the velocity of the motor.
            </summary>
            <remarks>This is reported back from the motor controller as the motor changes speed.</remarks>
        </member>
        <member name="T:Phidgets.Events.CurrentChangeEventArgs">
            <summary>
            Current Change Event data and information will be stored in this class.
            </summary>
            <remarks>
            Data specific to this event args class are the index of the motor whose current draw is changing and the current value read.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.CurrentChangeEventArgs.Index">
            <summary>
            The reference to the index of the motor.
            </summary>
        </member>
        <member name="F:Phidgets.Events.CurrentChangeEventArgs.Current">
            <summary>
            The reference the current of the motor.
            </summary>
            <remarks>This is a representation of the ammount of current being used by the motor.</remarks>
        </member>
        <member name="T:Phidgets.Events.PositionChangeEventArgs">
            <summary>
            Servo Position Change Event data and information will be stored in this class.
            </summary>
            <remarks>
            Data specific to this event args class are the index of the motor whose position is changing and the position value read.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.PositionChangeEventArgs.Index">
            <summary>
            The reference to the index of the motor.
            </summary>
        </member>
        <member name="F:Phidgets.Events.PositionChangeEventArgs.Position">
            <summary>
            The reference to the position of the servo motor.
            </summary>
            <remarks>
            This is esentially just the last position that the servo was set to, echoed back from the controller board.
            </remarks>
        </member>
        <member name="T:Phidgets.Events.StepperPositionChangeEventArgs">
            <summary>
            Stepper Position Change Event data and information will be stored in this class.
            </summary>
            <remarks>
            Data specific to this event args class are the index of the stepper motor whose position is changing and the position value read.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.StepperPositionChangeEventArgs.Index">
            <summary>
            The reference to the index of the stepper motor.
            </summary>
        </member>
        <member name="F:Phidgets.Events.StepperPositionChangeEventArgs.Position">
            <summary>
            The reference to the position of the stepper motor.
            </summary>
        </member>
        <member name="T:Phidgets.Events.PHChangeEventArgs">
            <summary>
            PH Change Event data and information will be stored in this class.
            </summary>
            <remarks>
            Data specific to this event args class is the PH value read.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.PHChangeEventArgs.PH">
            <summary>
            The reference pH value.
            </summary>
            <remarks>
            This value can range from 0-14.
            </remarks>
        </member>
        <member name="T:Phidgets.Events.TagEventArgs">
            <summary>
            Tag Event data and information will be stored in this class.
            </summary>
            <remarks>
            Data specific to this event args class is the Tag data that is read.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.TagEventArgs.Tag">
            <summary>
            The reference to the gained or lost tag.
            </summary>
            <remarks>
            The tag is a 10 digit hex number represented as a string.
            </remarks>
        </member>
        <member name="T:Phidgets.Events.TemperatureChangeEventArgs">
            <summary>
            Temperature Change Event data and information will be stored in this class.
            </summary>
            <remarks>
            Data specific to this event args class is the index of the temperature sensor and the temperature data.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.TemperatureChangeEventArgs.Index">
            <summary>
            The reference to the index of the sensor.
            </summary>
            <remarks>
            Index of the themrocouple.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.TemperatureChangeEventArgs.Temperature">
            <summary>
            The reference to the temperature of the sensor.
            </summary>
            <remarks>
            The temperature of the sensor is degrees celcius.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.TemperatureChangeEventArgs.Potential">
            <summary>
            The reference to the potential of the sensor.
            </summary>
            <remarks>
            The potential of the sensor is in millivolts. This is only valid for the thermocouple inputs.
            </remarks>
        </member>
        <member name="T:Phidgets.Events.WeightChangeEventArgs">
            <summary>
            Weight Change Event data and information will be stored in this class.
            </summary>
            <remarks>
            Data specific to this event args class is the weight data read by the sensor.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.WeightChangeEventArgs.Weight">
            <summary>
            The reference to the weight read by the sensor.
            </summary>
            <remarks>
            The weight read by the sensor is read in kg.
            </remarks>
        </member>
        <member name="T:Phidgets.Events.KeyEventArgs">
            <summary>
            Key Event data and information will be stored in this class.
            </summary>
            <remarks>
            Data specific to this event args class is the value data and the key.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.KeyEventArgs.value">
            <summary>
            The value data
            </summary>
        </member>
        <member name="F:Phidgets.Events.KeyEventArgs.key">
            <summary>
            The Key
            </summary>
        </member>
        <member name="T:Phidgets.Events.IRCodeEventArgs">
            <summary>
            IR Code Event data and information will be stored in this class.
            </summary>
            <remarks>
            Data specific to this event args class is IR Code data.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.IRCodeEventArgs.Code">
            <summary>
            IR Code.
            </summary>
        </member>
        <member name="F:Phidgets.Events.IRCodeEventArgs.Repeat">
            <summary>
            Number of repeats.
            </summary>
        </member>
        <member name="T:Phidgets.Events.IRRawDataEventArgs">
            <summary>
            IR Raw Data Event data and information will be stored in this class.
            </summary>
            <remarks>
            Data specific to this event args class is raw IR data.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.IRRawDataEventArgs.RawData">
            <summary>
            Raw IR data.
            </summary>
        </member>
        <member name="T:Phidgets.Events.IRLearnEventArgs">
            <summary>
            IR Learn Event data and information will be stored in this class.
            </summary>
            <remarks>
            Data specific to this event args class is the Learned code.
            </remarks>
        </member>
        <member name="F:Phidgets.Events.IRLearnEventArgs.LearnedCode">
            <summary>
            Learned code data.
            </summary>
        </member>
        <member name="T:Phidgets.Events.SpatialDataEventArgs">
            <summary>
            Spatial Event data and information will be stored in this class.
            </summary>
            <remarks>
            Data specific to this event args class is the spatial data read by the sensor(s).
            </remarks>
        </member>
        <member name="F:Phidgets.Events.SpatialDataEventArgs.spatialData">
            <summary>
            One or more sets of spatial data.
            </summary>
        </member>
        <member name="T:Phidgets.Events.AttachEventHandler">
            <summary>
            The Attach Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">An AttachEventArgs object containing data and information related to the attach event.</param>
        </member>
        <member name="T:Phidgets.Events.DetachEventHandler">
            <summary>
            The Detach Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">An DetachEventArgs object containing data and information related to the detach event.</param>
        </member>
        <member name="T:Phidgets.Events.ServerDisconnectEventHandler">
            <summary>
            The Server connect Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">A ServerConnectEventArgs object containing data and information related to the server connect event.</param>
        </member>
        <member name="T:Phidgets.Events.ServerConnectEventHandler">
            <summary>
            The Server disconnect Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">A ServerDisconnectEventArgs object containing data and information related to the server disconnect event.</param>
        </member>
        <member name="T:Phidgets.Events.ErrorEventHandler">
            <summary>
            The Error Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">An ErrorEventArgs object containing data and information related to the error event.</param>
        </member>
        <member name="T:Phidgets.Events.SensorChangeEventHandler">
            <summary>
            The Sensor Change Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">An SensorChangeEventArgs object containing data and information related to the sensor change event.</param>
        </member>
        <member name="T:Phidgets.Events.InputChangeEventHandler">
            <summary>
            The Input Change Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">An InputChangeEventArgs object containing data and information related to the input change event.</param>
        </member>
        <member name="T:Phidgets.Events.OutputChangeEventHandler">
            <summary>
            The Output Change Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">An OutputChangeEventArgs object containing data and information related to the output change event.</param>
        </member>
        <member name="T:Phidgets.Events.EncoderPositionChangeEventHandler">
            <summary>
            The Encoder Position Change Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">An EncoderPositionChangeEventArgs object containing data and information related to the encoder position change event.</param>
        </member>
        <member name="T:Phidgets.Events.AccelerationChangeEventHandler">
            <summary>
            The Acceleration Change Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">An AccelerationChangeEventArgs object containing data and information related to the acceleration change event.</param>
        </member>
        <member name="T:Phidgets.Events.PositionChangeEventHandler">
            <summary>
            The Position Change Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">An PositionChangeEventArgs object containing data and information related to the position change event.</param>
        </member>
        <member name="T:Phidgets.Events.StepperPositionChangeEventHandler">
            <summary>
            The Stepper Position Change Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">An StepperPositionChangeEventArgs object containing data and information related to the stepper position change event.</param>
        </member>
        <member name="T:Phidgets.Events.VelocityChangeEventHandler">
            <summary>
            The Velocity Change Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">An VelocityChangeEventArgs object containing data and information related to the velocity change event.</param>
        </member>
        <member name="T:Phidgets.Events.CurrentChangeEventHandler">
            <summary>
            The Current Change Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">An CurrentChangeEventArgs object containing data and information related to the current change event.</param>
        </member>
        <member name="T:Phidgets.Events.PHChangeEventHandler">
            <summary>
            The PH Change Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">A PHChangeEventArgs object containing data and information related to the PH change event.</param>
        </member>
        <member name="T:Phidgets.Events.TagEventHandler">
            <summary>
            The Tag Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">A TagEventArgs object containing data and information related to the tag event.</param>
        </member>
        <member name="T:Phidgets.Events.TemperatureChangeEventHandler">
            <summary>
            The Temperature Change Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">A TemperatureChangeEventArgs object containing data and information related to the temperature change event.</param>
        </member>
        <member name="T:Phidgets.Events.WeightChangeEventHandler">
            <summary>
            The Weight Change Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">A WeightChangeEventArgs object containing data and information related to the weight change event.</param>
        </member>
        <member name="T:Phidgets.Events.KeyEventHandler">
            <summary>
            The Key Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">A KeyEventArgs object containing data and information related to the key event.</param>
        </member>
        <member name="T:Phidgets.Events.IRCodeEventHandler">
            <summary>
            The IR Code Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">A IRCodeEventArgs object containing data and information related to the key event.</param>
        </member>
        <member name="T:Phidgets.Events.IRRawDataEventHandler">
            <summary>
            The IR Raw Data Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">A IRRawDataEventArgs object containing data and information related to the key event.</param>
        </member>
        <member name="T:Phidgets.Events.IRLearnEventHandler">
            <summary>
            The IR Learn Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">A IRLearnEventArgs object containing data and information related to the key event.</param>
        </member>
        <member name="T:Phidgets.Events.SpatialDataEventHandler">
            <summary>
            The Spatial Data Event Delegate.
            </summary>
            <param name="sender">The object that triggered the event.</param>
            <param name="e">A SpatialDataEventArgs object containing data and information related to the key event.</param>
        </member>
        <member name="T:Phidgets.TextLED">
            <summary>
            This class represents a Phidget Text LED. All methods to control the Text LED are implemented in this class.
            </summary>
            <remarks>
            The Text LED is a Phidget that displays text and numerals on LED numeric display in rows. The number of rows and size of each row depends on your configuration.
            </remarks>
        </member>
        <member name="F:Phidgets.TextLED.rows">
            <summary>
            The collection of available rows of text display on the TextLED screen.
            </summary>
        </member>
        <member name="M:Phidgets.TextLED.#ctor">
            <summary>
            Class Constructor.
            </summary>
            <remarks>
            Calling this opens a connection to the phidget21 C library creates an internal handle for this Phidget, ready to call open on.
            </remarks>
        </member>
        <member name="M:Phidgets.TextLED.Finalize">
            <summary>
            Class destructor/finalizer
            </summary>
            <remarks>
            Will attempt to close the phidget if it has yet to be closed.
            </remarks>
        </member>
        <member name="P:Phidgets.TextLED.Brightness">
            <summary>
            Gets or Sets the brightness of all rows.
            </summary>
            <remarks>
            The Default brightness is 100. The valid range is 0-100.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or the brightness value is out of range.</exception>
        </member>
        <member name="T:Phidgets.Accelerometer">
            <summary>
            <para>This class represents a Phidget Accelerometer. All methods to read acceleration data from an Accelerometer are implemented in this class.</para>
            </summary>
            <remarks>
            <para>The Phidget Accelerometer provides 2-3 axes of acceleration data, at anywhere from 2g to 10g sensitivity, depending on the specific revision. 
            See your hardware documetation for more information. They can measure both static (gravity) and dynamic acceleration.</para>
            </remarks>
        </member>
        <member name="F:Phidgets.Accelerometer.axes">
            <summary>
            The collection of accelerometer axes.
            </summary>
            <remarks>
            <para>Currently, accelerometers have either two or three axes of acceleration - x and y, or x, y, abd z.</para>
            <para>The indexes of which - Index 0 is the x-axis, 1 is the y-axis, and 2 is the z-axis (where available).</para>
            </remarks>
        </member>
        <member name="M:Phidgets.Accelerometer.#ctor">
            <summary>
            Accelerometer constructor.
            </summary>
        </member>
        <member name="M:Phidgets.Accelerometer.Finalize">
            <summary>
            Accelerometer deconstructor.
            </summary>
            <remarks>
            Will attempt to close the Phidget device.
            </remarks>
        </member>
        <member name="E:Phidgets.Accelerometer.AccelerationChange">
            <summary>
            Acceleration Change Event.
            </summary>
            <remarks>
            This event is called when the acceleration of an axis changes by more then the set sensitivity.
            </remarks>
        </member>
        <member name="T:Phidgets.TextLEDRow">
            <summary>
            This class represents a row of text display on the screen of the TextLED.
            </summary>
        </member>
        <member name="P:Phidgets.TextLEDRow.DisplayString">
            <summary>
            Sets the display string of a row.
            </summary>
            <remarks>If the string is longer then the row, it will be truncated.</remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the row is out of range.</exception>
        </member>
        <member name="P:Phidgets.TextLEDRow.MaximumLength">
            <summary>
            Returns the number of columns (Characters per row).
            </summary>
            <remarks>
            This returns the maximum number of columns supported by the device, not neccessarily the number of columns actually available with your coniguration.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="T:Phidgets.TextLEDRowCollection">
            <summary>
            This class represents a collection of TextLEDRows.
            </summary>
            <remarks>
            This class contains the count of the total number of rows on the TextLED and the indexer for accessing these display rows.
            </remarks>
        </member>
        <member name="P:Phidgets.TextLEDRowCollection.Item(System.Int32)">
            <summary>
            The TextLED row indexer list. This gets a reference to the TextLEDRow object stored at the supplied index locaiton in the collection list.
            </summary>
            <param name="index">The TextLED row index.</param>
            <returns>The TextLED row object for the specified index.</returns>
        </member>
        <member name="T:Phidgets.TemperatureSensorAmbientSensor">
            <summary>
            This class represents the temperature IC (or Ambient sensor) on a Phidget TemperatureSensor.
            </summary>
            <remarks>
            A Phidget TemperatureSensor IC/Ambient sensor object stores the ambient board temperature. 
            The sesnor's sensitivity can also be modified from this class.  It can be used to measure the 
            temperature of the thermocouple cold junction and calibrate the thermocouple sensed temperature.
            </remarks>
        </member>
        <member name="P:Phidgets.TemperatureSensorAmbientSensor.Temperature">
            <summary>
            Gets the temperature of the ambient sensor IC.
            </summary>
            <remarks>
            This value is returned in degrees celcius but can easily be converted into other units. 
            The IC is calibrated during manufacture.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.TemperatureSensorAmbientSensor.TemperatureMax">
            <summary>
            Represents the largest temperature value that the ambient sensor could return.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.TemperatureSensorAmbientSensor.TemperatureMin">
            <summary>
            Represents the smallest temperature value that the ambient sensor could return.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="T:Phidgets.TemperatureSensorSensor">
            <summary>
            This class represents a thermocouple sensor attached to a Phidget TemperatureSensor.
            </summary>
            <remarks>
            A Phidget TemperatureSensor thermocouple sensor object stores the thermocouple sensor data 
            for that thermocouple sensor. The sensitivity of the temperature readings for the related 
            thermocouple is implemented in this class.
            </remarks>
        </member>
        <member name="P:Phidgets.TemperatureSensorSensor.Temperature">
            <summary>
            Gets the temperature of this thermocouple sensor.
            </summary>
            <remarks>
            This value is returned in degrees celcius but can easily be converted into other units. 
            The accuracy depends on the thermocouple used. The board is calibrated during manufacture.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.TemperatureSensorSensor.TemperatureMax">
            <summary>
            Represents the largest temperature value that this sensor could return.
            </summary>
            <remarks>
            This value will change when the Themocouple type is changed.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.TemperatureSensorSensor.TemperatureMin">
            <summary>
            Represents the smallest temperature value that this sensor could return.
            </summary>
            <remarks>
            This value will change when the Themocouple type is changed.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.TemperatureSensorSensor.Potential">
            <summary>
            Gets the potential of this thermocouple sensor in mv.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.TemperatureSensorSensor.PotentialMax">
            <summary>
            Represents the largest potential that this sensor could return in mv.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.TemperatureSensorSensor.PotentialMin">
            <summary>
            Represents the smallest potential that this sensor could return in mv.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.TemperatureSensorSensor.Sensitivity">
            <summary>
            Gets / sets the temperature change trigger sensitivity for the thermocouple sensor.
            </summary>
            <remarks>
            This is the ammount by which the sensed temperature must change between TemperatureChangeEvents. By default this is set to 0.5.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.TemperatureSensorSensor.Type">
            <summary>
            Gets / sets the thermocouple type.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="T:Phidgets.TemperatureSensorSensor.ThermocoupleType">
            <summary>
            Supported thermocouple types
            </summary>
        </member>
        <member name="T:Phidgets.TemperatureSensorSensorCollection">
            <summary>
            This class represents a collection of Thermocouple sensors.
            </summary>
            <remarks>
            This class contains the count of the available thermocouple sensors and the thermocouple indexer to access the thermocouple sensors.  Currently, only one is supported.
            </remarks>
        </member>
        <member name="P:Phidgets.TemperatureSensorSensorCollection.Item(System.Int32)">
            <summary>
            The thermocouple indexer list. This gets a reference to the TemperatureSensor object 
            representing a termocouple sensor stored at the supplied index location in the collection list.
            </summary>
            <param name="index">The thermocouple sensor index.</param>
        </member>
        <member name="T:Phidgets.AnalogOutput">
            <summary>
            This class represents an analog output on a Phidget Analog.
            </summary>
        </member>
        <member name="P:Phidgets.AnalogOutput.Voltage">
            <summary>
            Gets/Sets the voltage, in V.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the value is unknown.</exception>
        </member>
        <member name="P:Phidgets.AnalogOutput.VoltageMax">
            <summary>
            Gets the max supported output voltage.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.AnalogOutput.VoltageMin">
            <summary>
            Gets the min supported output voltage.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.AnalogOutput.Enabled">
            <summary>
            Gets/Sets the enabled state for an output.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, of the value is unknown.</exception>
        </member>
        <member name="T:Phidgets.AnalogOutputCollection">
            <summary>
            This class represents the collection of outputs related to a Phidget Analog.  
            All the methods and properties used to access the available outputs are implemented in this class.
            </summary>
            <remarks>
            This class contains the count of the available outputs and the output indexer to access the outputs.
            </remarks>
        </member>
        <member name="P:Phidgets.AnalogOutputCollection.Item(System.Int32)">
            <summary>
            The AnalogOutput indexer list.
            </summary>
        </member>
        <member name="T:Phidgets.IR">
            <summary>
            This class represents a Phidget IR Controller. All methods to control an IR Controller are implemented in this class.
            </summary>
        </member>
        <member name="F:Phidgets.IR.RAWDATA_LONGSPACE">
            <summary>
            A space in raw data that is longer then 327,670 microseconds, which is the longest measurable timespan.
            </summary>
        </member>
        <member name="M:Phidgets.IR.#ctor">
            <summary>
            Class Constructor.
            </summary>
            <remarks>
            Calling this opens a connection to the phidget21 C library creates an internal handle for this Phidget, ready to call open on.
            </remarks>
        </member>
        <member name="M:Phidgets.IR.Finalize">
            <summary>
            Class destructor/finalizer.
            </summary>
            <remarks>
            Will attempt to close the phidget if it has yet to be closed.
            </remarks>
        </member>
        <member name="M:Phidgets.IR.transmit(Phidgets.IRCode,Phidgets.IRCodeInfo)">
            <summary>
            Transmits a code.
            </summary>
            <param name="code">The code to transmit.</param>
            <param name="codeInfo">Code encoding information.</param>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="M:Phidgets.IR.transmitRepeat">
            <summary>
            Transmits a repeat of a previously transmitted code.
            </summary>
            <remarks>This must be called within the gap period after transmitting the original code. This is required for codes that use
            seperate sequences for the code and the repeat identifier.</remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="M:Phidgets.IR.transmitRaw(System.Int32[])">
            <summary>
            Transmits raw microsecond pulse data.
            </summary>
            <param name="data">An array of microsecond data which starts and ends with a pulse.</param>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="M:Phidgets.IR.transmitRaw(System.Int32[],System.Int32)">
            <summary>
            Transmits raw microsecond pulse data, with a specified gap.
            </summary>
            <param name="data">An array of microsecond data which starts and ends with a pulse.</param>
            <param name="gap">A microsecond gap that will be maintained after the data is sent.</param>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="M:Phidgets.IR.transmitRaw(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Transmits raw microsecond pulse data.
            </summary>
            <param name="data">An array of microsecond data.</param>
            <param name="offset">An offset in the data array to start at - this must be a pulse.</param>
            <param name="count">The number of data elements to transmit - this must be uneven.</param>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="M:Phidgets.IR.transmitRaw(System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Transmits raw microsecond pulse data, with a specified gap.
            </summary>
            <param name="data">An array of microsecond data.</param>
            <param name="offset">An offset in the data array to start at - this must be a pulse.</param>
            <param name="count">The number of data elements to transmit - this must be uneven.</param>
            <param name="gap">A microsecond gap that will be maintained after the data is sent.</param>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="M:Phidgets.IR.transmitRaw(System.Int32[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Transmits raw microsecond pulse data, with a specified gap, carrier frequency and duty cycle.
            </summary>
            <param name="data">An array of microsecond data.</param>
            <param name="offset">An offset in the data array to start at - this must be a pulse.</param>
            <param name="count">The number of data elements to transmit - this must be uneven.</param>
            <param name="gap">A microsecond gap that will be maintained after the data is sent.</param>
            <param name="carrierFrequency">The carrier frequency.</param>
            <param name="dutyCycle">The duty cycle.</param>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="M:Phidgets.IR.readRaw(System.Int32[])">
            <summary>
            Reads raw IR data.
            </summary>
            <param name="buffer">An array to read data into.</param>
            <returns>Number of elements read.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="M:Phidgets.IR.readRaw(System.Int32[],System.Int32,System.Int32)">
            <summary>
            Read raw IR data, at an offset.
            </summary>
            <param name="buffer">An array to read data into.</param>
            <param name="offset">Offset in buffer to start writing data.</param>
            <param name="count">Max ammount of data to read.</param>
            <returns>Ammount of data read.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="E:Phidgets.IR.Code">
            <summary>
            IR Code event.
            </summary>
            <remarks>This event is called whenever a new code is recognized.</remarks>
        </member>
        <member name="E:Phidgets.IR.Learn">
            <summary>
            IR Learn event.
            </summary>
            <remarks>This event is called when a new code has been learned. This generally requires the button to be held down for a second or two.</remarks>
        </member>
        <member name="E:Phidgets.IR.RawData">
            <summary>
            IR Raw Data event
            </summary>
            <remarks>This event is called whenever new IR data is available. Data is in the form of an array of microsecond pulse values.
            This can be used if the user wishes to do their own data decoding, or for codes that the PhidgetIR cannot automatically recognize.</remarks>
        </member>
        <member name="P:Phidgets.IR.LastCode">
            <summary>
            Gets the last code that was recieved.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.IR.LastLearnedCode">
            <summary>
            Gets the last code the was learned.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="T:Phidgets.IRCode">
            <summary>
            This class represents an IR Code.
            </summary>
        </member>
        <member name="F:Phidgets.IRCode.Data">
            <summary>
            IR code data.
            </summary>
            <remarks>This is MSB first, right justified.</remarks>
        </member>
        <member name="F:Phidgets.IRCode.BitCount">
            <summary>
            Data bits.
            </summary>
            <remarks>This is important because many codes use a number of bits that doesn't line up with byte (8-bit) borders.</remarks>
        </member>
        <member name="M:Phidgets.IRCode.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new IR Code from a string.
            </summary>
            <param name="code">The IR code.</param>
            <param name="bitCount">The code length in bits.</param>
        </member>
        <member name="M:Phidgets.IRCode.#ctor(System.Byte[],System.Int32)">
            <summary>
            Creates a new IR Code from a byte array.
            </summary>
            <param name="data">The IR code data.</param>
            <param name="bitCount">The code length in bits.</param>
        </member>
        <member name="M:Phidgets.IRCode.ToString">
            <summary>
            String representation of the IR code.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Phidgets.IRLearnedCode">
            <summary>
            This class represents a learned IR Code.
            </summary>
            <remarks>This contains all data needed to re-transmit the code.</remarks>
        </member>
        <member name="F:Phidgets.IRLearnedCode.Code">
            <summary>
            The learned code.
            </summary>
        </member>
        <member name="F:Phidgets.IRLearnedCode.CodeInfo">
            <summary>
            The code encoding parameters.
            </summary>
        </member>
        <member name="T:Phidgets.IRCodeInfo">
            <summary>
            This class represents the encoding parameters needed to transmit a code.
            </summary>
        </member>
        <member name="F:Phidgets.IRCodeInfo.Encoding">
            <summary>
            Data Encoding.
            </summary>
            <remarks>This defaults to Space encoding.</remarks>
        </member>
        <member name="F:Phidgets.IRCodeInfo.Length">
            <summary>
            Code length.
            </summary>
            <remarks>This defaults to Constant.</remarks>
        </member>
        <member name="F:Phidgets.IRCodeInfo.BitCount">
            <summary>
            Code data length in bits.
            </summary>
        </member>
        <member name="F:Phidgets.IRCodeInfo.Gap">
            <summary>
            Gap length in us.
            </summary>
        </member>
        <member name="F:Phidgets.IRCodeInfo.Trail">
            <summary>
            Trailing pulse length in us.
            </summary>
        </member>
        <member name="F:Phidgets.IRCodeInfo.Header">
            <summary>
            Header data array in us.
            </summary>
        </member>
        <member name="F:Phidgets.IRCodeInfo.One">
            <summary>
            Pulse-Space encoding for a '1', in us.
            </summary>
        </member>
        <member name="F:Phidgets.IRCodeInfo.Zero">
            <summary>
            Pulse-Space encoding for a '0', in us.
            </summary>
        </member>
        <member name="F:Phidgets.IRCodeInfo.MinRepeat">
            <summary>
            Minimum number of times to repeat the code.
            </summary>
        </member>
        <member name="F:Phidgets.IRCodeInfo.ToggleMask">
            <summary>
            Mask of bits that should be toggled every time the code is sent.
            </summary>
            <remarks>This is usually used in combination with MinRepeat.</remarks>
        </member>
        <member name="F:Phidgets.IRCodeInfo.Repeat">
            <summary>
            Repeat code, in us.
            </summary>
        </member>
        <member name="F:Phidgets.IRCodeInfo.CarrierFrequency">
            <summary>
            Carrier frequency
            </summary>
        </member>
        <member name="F:Phidgets.IRCodeInfo.DutyCycle">
            <summary>
            Duty cycle.
            </summary>
        </member>
        <member name="M:Phidgets.IRCodeInfo.#ctor(System.Int32)">
            <summary>
            Creates a new Code Info object.
            </summary>
            <param name="bitCount">Code length.</param>
        </member>
        <member name="M:Phidgets.IRCodeInfo.#ctor(Phidgets.IRCodeInfo.IREncoding,System.Int32)">
            <summary>
            Creates a new Code Info object.
            </summary>
            <param name="encoding">Encoding.</param>
            <param name="bitCount">Code length.</param>
        </member>
        <member name="M:Phidgets.IRCodeInfo.#ctor(Phidgets.IRCodeInfo.IREncoding,System.Int32,System.Int32[],System.Int32[],System.Int32[],System.Int32,System.Int32)">
            <summary>
            Creates a new Code Info object.
            </summary>
            <param name="encoding">Encoding.</param>
            <param name="bitCount">Code length.</param>
            <param name="header">Header data.</param>
            <param name="zero">Zero data.</param>
            <param name="one">One data.</param>
            <param name="trail">Trailing pulse length.</param>
            <param name="gap">Gap length.</param>
        </member>
        <member name="M:Phidgets.IRCodeInfo.#ctor(Phidgets.IRCodeInfo.IREncoding,System.Int32,System.Int32[],System.Int32[],System.Int32[],System.Int32,System.Int32,System.Int32[])">
            <summary>
            Creates a new Code Info object.
            </summary>
            <param name="encoding">Encoding.</param>
            <param name="bitCount">Code length.</param>
            <param name="header">Header data.</param>
            <param name="zero">Zero data.</param>
            <param name="one">One data.</param>
            <param name="trail">Trailing pulse length.</param>
            <param name="gap">Gap length</param>
            <param name="repeat">Repeat code data.</param>
        </member>
        <member name="M:Phidgets.IRCodeInfo.#ctor(Phidgets.IRCodeInfo.IREncoding,System.Int32,System.Int32[],System.Int32[],System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Byte[],Phidgets.IRCodeInfo.IRCodeLength,System.Int32,System.Int32)">
            <summary>
            Creates a new Code Info object.
            </summary>
            <param name="encoding">Encoding.</param>
            <param name="bitCount">Code length.</param>
            <param name="header">Header data.</param>
            <param name="zero">Zero data.</param>
            <param name="one">One data.</param>
            <param name="trail">Trailing pulse length.</param>
            <param name="gap">Gap length</param>
            <param name="repeat">Repeat code data.</param>
            <param name="minRepeat">Number of times to repeat code.</param>
            <param name="toggleMask">Code bits to toggle on each send.</param>
            <param name="length">Constant or variable length code.</param>
            <param name="carrierFrequency">Carrier frequency.</param>
            <param name="dutyCycle">Duty cycle.</param>
        </member>
        <member name="T:Phidgets.IRCodeInfo.IREncoding">
            <summary>
            Data encoding.
            </summary>
        </member>
        <member name="T:Phidgets.IRCodeInfo.IRCodeLength">
            <summary>
            Code length.
            </summary>
        </member>
        <member name="F:Phidgets.IRCodeInfo.IRCodeLength.Constant">
            <summary>
            Constant - the bitstream + gap length is constant.
            </summary>
        </member>
        <member name="F:Phidgets.IRCodeInfo.IRCodeLength.Variable">
            <summary>
            Variable - the bitstream has a variable length with a constant gap.
            </summary>
        </member>
        <member name="T:Phidgets.AdvancedServo">
            <summary>
            This class represents a Phidget Advanced Servo Controller. All methods to to control a motor controller and read back motor data are implemented in this class.
            </summary>
        </member>
        <member name="F:Phidgets.AdvancedServo.servos">
            <summary>
            The collection of available servos.
            </summary>
        </member>
        <member name="M:Phidgets.AdvancedServo.#ctor">
            <summary>
            Class Constructor.
            </summary>
            <remarks>
            Calling this opens a connection to the phidget21 C library creates an internal handle for this Phidget, ready to call open on.
            </remarks>
        </member>
        <member name="M:Phidgets.AdvancedServo.Finalize">
            <summary>
            Class destructor/finalizer.
            </summary>
            <remarks>
            Will attempt to close the phidget if it has yet to be closed.
            </remarks>
        </member>
        <member name="E:Phidgets.AdvancedServo.PositionChange">
            <summary>
            Position Change Events.
            </summary>
            <remarks>
            <para>The servo position change handler is called when the servo position has changed. 
            The event will get fired after every call to setPosition.</para>
            </remarks>
        </member>
        <member name="E:Phidgets.AdvancedServo.CurrentChange">
            <summary>
            Current Change Event.
            </summary>
            <remarks>
            <para>The current change handler is called when the current consumed by a motor changes.</para>
            </remarks>
        </member>
        <member name="E:Phidgets.AdvancedServo.VelocityChange">
            <summary>
            Velocity Change Event.
            </summary>
            <remarks>
            <para>The velocity change handler is called when the velocity of a servo changes.</para>
            </remarks>
        </member>
        <member name="T:Phidgets.MotorControlMotor">
            <summary>
            This class represents a motor for a Phidget MotorControl.  All the properties of a motor are stored and modified in this class.
            </summary>
            <remarks>A Phidget MotorControl motor object stores the motor data for that motor. 
            The motor's acceleration and velocity can be modified in this class.</remarks>
        </member>
        <member name="P:Phidgets.MotorControlMotor.Current">
            <summary>
            Gets the Current consumption of the motor.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.MotorControlMotor.Acceleration">
            <summary>
            Gets or sets the Acceleration property of the motor.
            </summary>
            <remarks>The valid range is 0-100, and refers to how fast the Motor Controller will change the speed of a motor.</remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.MotorControlMotor.AccelerationMax">
            <summary>
            Represents the largest acceleration value that this motor will accept.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.MotorControlMotor.AccelerationMin">
            <summary>
            Represents the smallest acceleration value that this motor will accept.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.MotorControlMotor.Velocity">
            <summary>
            Gets or sets the Velocity property of the motor.
            </summary>
            <remarks>The valid range is -100 - 100, with 0 being stopped. This corresponds to PWM duty cycle.</remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.MotorControlMotor.BackEMFSensing">
            <summary>
            Gets or sets the back-emf sensing state for a motor.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.MotorControlMotor.BackEMF">
            <summary>
            Gets the back-emf value for a motor
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.MotorControlMotor.Braking">
            <summary>
            Gets or sets the braking value for a motor (0-100%).
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="T:Phidgets.MotorControlMotorCollection">
            <summary>
            This class represents a collection of Motors. 
            All the methods and properties used to access the available motors are implemented in this class.
            </summary>
            <remarks>This class contains the count of the available motors and the motor indexer to access the motors.</remarks>
        </member>
        <member name="P:Phidgets.MotorControlMotorCollection.Item(System.Int32)">
            <summary>
            The Motor indexer list. This gets a reference to the Motor object stored at the supplied index locaiton in the collection list.
            </summary>
            <param name="index">The Motor index.</param>
            <returns>A reference to the Motor object stored at the supplied index location in the collection list.</returns>
        </member>
        <member name="T:Phidgets.MotorControlDigitalInputCollection">
            <summary>
            This class represents a collection of Digital Inputs. 
            </summary>
            <remarks>This class contains the count of the available digital inputs and the digital input 
            indexer to access the digital inputs.</remarks>
        </member>
        <member name="P:Phidgets.MotorControlDigitalInputCollection.Item(System.Int32)">
            <summary>
            The digital input indexer list. This gets the state of a digital input at the supplied index in the list.
            </summary>
            <remarks>Digital inputs read True where they are activated and false when they are in their default state.</remarks>
            <param name="index">Index of the input.</param>
            <returns>State of the input.</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the index is out of range.</exception>
        </member>
        <member name="P:Phidgets.MotorControlDigitalInputCollection.Count">
            <summary>
            Returns the number of ditigal inputs on this MotorControl.
            </summary>
            <remarks>Not all Motor Controllers have digital inputs.</remarks>
        </member>
        <member name="P:Phidgets.MotorControlEncoder.Position">
            <summary>
            Gets / sets the position of an encoder
            </summary>
        </member>
        <member name="T:Phidgets.MotorControlEncoderCollection">
            <summary>
            This class represents a collection of encoders.
            </summary>
        </member>
        <member name="P:Phidgets.MotorControlEncoderCollection.Item(System.Int32)">
            <summary>
            Gets an encoder at an index.
            </summary>
            <param name="index">The index of the encoder to get.</param>
            <returns>The encoder object.</returns>
        </member>
        <member name="P:Phidgets.MotorControlAnalogSensor.RawValue">
            <summary>
            Returns the raw value of a analog input.
            </summary>
            <remarks>This is a more accurate version of <see>Value</see>.  
            Note that the analog outputs are only 10-bit values and this value 
            represents an oversampling to 12-bit.</remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.MotorControlAnalogSensor.Value">
            <summary>
            Returns the value of a analog input.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="T:Phidgets.MotorControlAnalogSensorCollection">
            <summary>
            This class represents a collection of Analog Sensor Inputs.
            </summary>
            <remarks>
            This class contains the count of the available analog sensor inputs and the analog 
            sensor input indexer to access the analog sensor inputs.
            </remarks>
        </member>
        <member name="P:Phidgets.MotorControlAnalogSensorCollection.Item(System.Int32)">
            <summary>
            The analog sensor input indexer list. 
            This gets a reference to the analog sensor object stored at the supplied index locaiton in the collection list.
            </summary>
            <param name="index">The analog sensor input index.</param>
            <returns>A reference to the analog sensor object stored at the supplied index location in the collection list.</returns>
        </member>
        <member name="T:Phidgets.FrequencyCounterInput">
            <summary>
            Represents an input on a Phidget Frequency Counter.
            </summary>
        </member>
        <member name="M:Phidgets.FrequencyCounterInput.reset">
            <summary>
            Resets total count and total time for the input.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.FrequencyCounterInput.Frequency">
            <summary>
            Gets the measured frequency on this input, in Hz.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or the value is unknown.</exception>
        </member>
        <member name="P:Phidgets.FrequencyCounterInput.TotalTime">
            <summary>
            Gets the total time since last reset, in microseconds.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.FrequencyCounterInput.TotalCount">
            <summary>
            Gets the number of ticks counted since last reset.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.FrequencyCounterInput.Timeout">
            <summary>
            Gets/Sets the timeout for this input, in microseconds.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.FrequencyCounterInput.Enabled">
            <summary>
            Gets/Sets the enabled state for this input.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.FrequencyCounterInput.Filter">
            <summary>
            Gets/Sets the filter type for this input.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="T:Phidgets.FrequencyCounterInput.FilterType">
            <summary>
            The list of supported filter types.
            </summary>
        </member>
        <member name="T:Phidgets.FrequencyCounterInputCollection">
            <summary>
            This class represents a collection of frequency counter inputs.
            </summary>
        </member>
        <member name="T:Phidgets.PhidgetException">
            <summary>
            This class represents Phidget related exceptions.
            </summary>
            <remarks>
            All Phidget exceptions originate in the phidget21 C library. These exceptions can be thrown by most function in the library and 
            cover such things as trying to access a Phidget before opening it, or before it is attached and ready to use, 
            out of bounds Index and data values, and other less common problems.
            </remarks>
        </member>
        <member name="M:Phidgets.PhidgetException.#ctor(System.String,System.Int32)">
            <summary>
            Constructor which takes is an error number and description.
            </summary>
            <remarks>
            These exceptions originate from and are filled in by the phidget 21 C library. There shouldn't be a need to create them yourself.
            </remarks>
            <param name="message">Description.</param>
            <param name="code">Error code.</param>
        </member>
        <member name="P:Phidgets.PhidgetException.Code">
            <summary>
            Gets the error code.
            </summary>
            <remarks>
            <para>Note that Type is more useful then Code, and Code may be deprecated in the future.</para>
            </remarks>
        </member>
        <member name="P:Phidgets.PhidgetException.Type">
            <summary>
            Gets a error type.
            </summary>
            <remarks>
            This is a member of the ErrorType Enumeration that contains an entry for every type of Phidget error.
            </remarks>
        </member>
        <member name="P:Phidgets.PhidgetException.Description">
            <summary>
            Gets the error description.
            </summary>
            <remarks>
            This is an english phrase that describes the exception that occured.
            </remarks>
        </member>
        <member name="T:Phidgets.PhidgetException.ErrorType">
            <summary>
            Phidget error types.
            </summary>
        </member>
        <member name="T:Phidgets.PHSensorSensor">
             <summary>
             This class represents a Phidget PHSensor PH Sensor. All methods to read PH data from the PH Sensor are implemented in this class.
             </summary>
             <remarks>
             The Phidget PH Sensor provides one standard PH sensor input.
            </remarks>
        </member>
        <member name="P:Phidgets.PHSensorSensor.PH">
            <summary>
            Gets the measured pH.
            </summary>
            <remarks>
            This value can range from about 0 - 14 for valid readings when the sensor is attached.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.PHSensorSensor.PHMax">
            <summary>
            Represents the largest ph value that this sensor will return
            </summary>
            <remarks>
            This value will change when the Temperature property is changed
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.PHSensorSensor.PHMin">
            <summary>
            Represents the smallest ph value that this sensor will return
            </summary>
            <remarks>
            This value will change when the Temperature property is changed
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.PHSensorSensor.Sensitivity">
            <summary>
            Gets or sets the change trigger sensitivity.
            </summary>
            <remarks>
            This is how much the pH much change between successive PHChangeEvents. By default this value is set to 0.5.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.PHSensorSensor.Potential">
            <summary>
            Gets the Potential, in volts.
            </summary>
            <remarks>
            This returns the actual voltage potential measured by the ADC. A pH of 7.0 corresponts to a potential of 2.5v. 
            This is the value that is internally used to calculate pH in the library.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.PHSensorSensor.PotentialMax">
            <summary>
            Represents the largest potential value that this sensor will return.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.PHSensorSensor.PotentialMin">
            <summary>
            Represents the smallest potential value that this sensor will return.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.PHSensorSensor.Temperature">
            <summary>
            Sets the probe temperature.
            </summary>
            <remarks>
            This temperature is used in calculating the PH, and can be set to ensure maximum accuracy.
            If this is not set, the default value of 25 degrees celcius is used.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="T:Phidgets.RFID">
            <summary>
            This class represents a Phidget RFID Reader. All methods to read tags and set outputs on the RFID reader are implemented in this class.
            </summary>
            <remarks>
            The Phidget RFID reader can read one tag at a time. Both tag and tagloss event handlers are provided, 
            as well as control over the antenna so that multiple readers can be used in close proximity without interference.
            </remarks>
        </member>
        <member name="F:Phidgets.RFID.outputs">
            <summary>
            The collection of available digital outputs.
            </summary>
            <remarks>
            Phidget RFID readers have 0 or 2 more outputs.
            </remarks>
        </member>
        <member name="M:Phidgets.RFID.#ctor">
            <summary>
            Class Constructor.
            </summary>
            <remarks>
            Calling this opens a connection to the phidget21 C library creates an internal handle for this Phidget, ready to call open on.
            </remarks>
        </member>
        <member name="M:Phidgets.RFID.Finalize">
            <summary>
            Class destructor/finalizer.
            </summary>
            <remarks>
            Will attempt to close the phidget if it has yet to be closed.
            </remarks>
        </member>
        <member name="P:Phidgets.RFID.TagPresent">
            <summary>
            Gets a value indicating whether or not a tag is on the reader.
            </summary>
            <remarks>
            If there is a tag currently being read by the reader, this will return true. Otherwise it returns false.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.RFID.LastTag">
            <summary>
            Gets the last tag read by the reader - this tag may or may not still be on the reader - use TagPresent to find out.
            </summary>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.RFID.Antenna">
            <summary>
            Gets or sets the state of the antenna.
            </summary>
            <remarks>
            True turns the antenna on, False turns it off. The antenna if by default turned off, and needs to be explicitely 
            activated before tags can be read. Control over the antenna allows multiple readers to be used in close proximity, 
            as multiple readers will interfere with each other if their antenna's are activated simultaneously.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="P:Phidgets.RFID.LED">
            <summary>
            Gets or sets the state of the onboard LED.
            </summary>
            <remarks>
            True turns the LED on, False turns it off. The LED is by default turned off.
            </remarks>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached.</exception>
        </member>
        <member name="E:Phidgets.RFID.Tag">
            <summary>
            Tag gained event
            </summary>
            <remarks>
            <para>The tag handler is called when a new tag is seen by the reader. 
            The event is only fired one time for a new tag, so the tag has to be removed and then replaced before another tag gained event will fire.</para>
            </remarks>
        </member>
        <member name="E:Phidgets.RFID.TagLost">
            <summary>
            Tag lost event.
            </summary>
            <remarks>
            <para>The tag lost handler is called when a tag is removed from the reader.</para>
            </remarks>
        </member>
        <member name="E:Phidgets.RFID.OutputChange">
            <summary>
            Digital output change event.
            </summary>
            <remarks>
            <para>The output change handler is called when an output has changed.</para>
            </remarks>
        </member>
        <member name="T:Phidgets.EncoderEncoderWithEnable">
            <summary>
            This class represents an Encoder. 
            All the methods and properties used to access the available encoders are implemented in this class.
            </summary>
            <remarks>
            This class was added to support encoders with enable/index.
            </remarks>
        </member>
        <member name="P:Phidgets.EncoderEncoderWithEnable.Position">
            <summary>
            Gets / sets the position of an encoder
            </summary>
        </member>
        <member name="P:Phidgets.EncoderEncoderWithEnable.IndexPosition">
            <summary>
            Gets the index position for an encoder that supports index.
            </summary>
            <remarks>This is referenced to the Position.</remarks>
        </member>
        <member name="P:Phidgets.EncoderEncoderWithEnable.Enabled">
            <summary>
            Gets / sets the enabled state of an encoder.
            </summary>
            <remarks>This controls the power to the encoder.</remarks>
        </member>
        <member name="T:Phidgets.EncoderEncoderWithEnableCollection">
            <summary>
            This class represents a collection of encoders.
            </summary>
        </member>
        <member name="P:Phidgets.EncoderEncoderWithEnableCollection.Item(System.Int32)">
            <summary>
            Gets an encoder at an index.
            </summary>
            <param name="index">The index of the encoder to get.</param>
            <returns>The encoder object.</returns>
        </member>
        <member name="T:Phidgets.EncoderEncoderCollection">
            <summary>
            This class represents a collection of Encoders.
            </summary>
            <remarks>
            This class contains the count of the available encoders and the encoder indexer to access the encoders.
            This returns only the position of each encoder. To access enable/index on the newer encoder board, 
            use the EncoderEncoderWithEnableCollection.
            </remarks>
        </member>
        <member name="P:Phidgets.EncoderEncoderCollection.Item(System.Int32)">
            <summary>
            The encoder indexer list. This gets or sets the encoder position according to the provided index.
            </summary>
            <remarks>
            <para>Sets the position of a specific encoder. This resets the internal position count for an encoder. This call in no way actually sends information to the device, as an absolute position is maintained only in the library.</para>
            <para>After this call, position changes from the encoder will use the new value to calculate absolute position by using the return from the get property.</para>
            <para>Returns the position of an encoder through the get property. This is an absolute position as calcutated since the encoder was plugged in.</para>
            </remarks>
            <param name="index">The encoder index.</param>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the index is out of range.</exception>
        </member>
        <member name="P:Phidgets.EncoderEncoderCollection.Count">
            <summary>
            The number of available encoders.
            </summary>
            <remarks>
            The count property gets the total number of available encoders.
            </remarks>
        </member>
        <member name="T:Phidgets.EncoderDigitalInputCollection">
            <summary>
            This class represents a collection of Digital Inputs. 
            All the methods and properties used to access the available digital inputs are implemented in this class.
            </summary>
            <remarks>
            This class contains the count of the available digital inputs and the digital input indexer to access the digital inputs.
            </remarks>
        </member>
        <member name="P:Phidgets.EncoderDigitalInputCollection.Item(System.Int32)">
            <summary>
            The digital input indexer list. This gets the state of a digital input at the supplied index in the list.
            </summary>
            <remarks>
            On the mechanical encoder this refers to the pushbutton. The high speed encoder does not have any digital inputs. A value of true means that the input is active(the button is pushed).
            </remarks>
            <param name="index">index of the input</param>
            <returns>state of the input</returns>
            <exception cref="T:Phidgets.PhidgetException">If this Phidget is not opened and attached, or if the index is out of range.</exception>
        </member>
        <member name="P:Phidgets.EncoderDigitalInputCollection.Count">
            <summary>
            Returns number of digital inputs.
            </summary>
            <remarks>
            On the mechanical encoder this refers to the pushbutton. The high speed encoder does not have any digital inputs.
            </remarks>
            <returns>
            number of inputs
            </returns>
        </member>
    </members>
</doc>
